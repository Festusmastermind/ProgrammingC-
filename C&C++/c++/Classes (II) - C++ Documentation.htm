<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>


<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Classes (II) - C++ Documentation</title>
<style type="text/css">.hierarchy DIV {width:100px; height:24px; text-align:center; padding-top:8px; border:black 1px solid} </style>
<link rel="shortcut icon" type="image/x-icon" href="http://www.cplusplus.com/favicon.ico">
<link rel="stylesheet" type="text/css" href="Classes%20%28II%29%20-%20C++%20Documentation_files/main29f.css">
<script src="Classes%20%28II%29%20-%20C++%20Documentation_files/main29f.js" type="text/javascript"></script>
<script type="text/javascript">
new LoginBox('CH_boxLogin',1);</script>
</head><body>
<div id="CH_header">
	<a href="http://www.cplusplus.com/"><img src="Classes%20%28II%29%20-%20C++%20Documentation_files/cpp-logo.png" alt="cplusplus.com" width="198" height="75"></a>
	<div id="CH_bar">
		<b><a href="http://www.cplusplus.com/">C++</a> : <a href="http://www.cplusplus.com/doc/">Documentation</a> : <a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a> : Classes (II)</b>
	</div>
	
	<div id="CH_searchbox">
		<form id="search" action="/search.do" method="get">
		Search: <input name="q" size="13" class="txt"> <input value="Search" class="btn" type="submit">
		</form>
	</div>
	<div id="CH_boxLogin"><div class="C_LoginBox"><form style="display: block;" name="CH_frmLogin" id="CH_frmLogin" action="/user/access.cgi" onsubmit="elCH_boxLogin.send(); return false;" method="post"><table><tbody><tr><td></td><td class="right"><b>login:</b></td><td><input name="w" value="login" type="hidden"><input name="y" value="1" type="hidden"><input name="to" value="http://www.cplusplus.com/doc/tutorial/classes2/" type="hidden"><input class="txt" name="l" size="4" title="Type user name" type="text"></td><td><input class="txt" name="p" size="4" title="Type password" type="password"></td><td><input class="btn" value="sign in" type="submit"></td></tr><tr><td>sign in using:<a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=google&amp;to=%2Fdoc%2Ftutorial%2Fclasses2%2F" title="Sign in using your google account"><img src="Classes%20%28II%29%20-%20C++%20Documentation_files/16google.png" width="16" height="16"></a><a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=yahoo&amp;to=%2Fdoc%2Ftutorial%2Fclasses2%2F" title="Sign in using your Yahoo! account"><img src="Classes%20%28II%29%20-%20C++%20Documentation_files/16yahoo.png" width="16" height="16"></a></td><td colspan="4" class="right"><label for="rememberme">remember me<input class="chk" name="rememberme" id="rememberme" value="1" type="checkbox"> &nbsp; [<a href="http://www.cplusplus.com/user/access.cgi?w=signup">register</a>]</label></td></tr></tbody></table></form><div id="CH_insLogin"></div></div></div>
</div>
<div id="CH_container">
<table id="CH_containertbl"><tbody><tr>
<td id="CH_nav">
<table class="box">
<thead>
<tr><th><a href="http://www.cplusplus.com/">cplusplus.com</a></th></tr>
</thead>
<tbody>
<tr><td class="folder"><a href="http://www.cplusplus.com/info/">Information</a></td></tr>
<tr><td class="folder selected"><a href="http://www.cplusplus.com/doc/">Documentation</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/reference/">Reference</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/articles/">Articles</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/forum/">Forum</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/">Documentation</a></th></tr></thead>
<tbody><tr><td class="selected folder"><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/ascii/">Ascii Codes</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/boolean/">Boolean Operations</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/hex/">Numerical Bases</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></th></tr></thead>
<tbody><tr><td class="folder">Introduction:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/introduction/">Instructions for use</a></td></tr>
<tr><td class="folder">Basics of C++:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/program_structure/">Structure of a program</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/variables/">Variables. Data Types.</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/constants/">Constants</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/operators/">Operators</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/basic_io/">Basic Input/Output</a></td></tr>
<tr><td class="folder">Control Structures:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/control/">Control Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions/">Functions (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions2/">Functions (II)</a></td></tr>
<tr><td class="folder">Compound Data Types:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/arrays/">Arrays</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/ntcs/">Character Sequences</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/pointers/">Pointers</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/dynamic/">Dynamic Memory</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/structures/">Data Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/other_data_types/">Other Data Types</a></td></tr>
<tr><td class="folder">Object Oriented Programming:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes/">Classes (I)</a></td></tr>
<tr><td class="selected indent"><a href="http://www.cplusplus.com/doc/tutorial/classes2/">Classes (II)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/inheritance/">Friendship and inheritance</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/polymorphism/">Polymorphism</a></td></tr>
<tr><td class="folder">Advanced Concepts:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/templates/">Templates</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/namespaces/">Namespaces</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/exceptions/">Exceptions</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/typecasting/">Type Casting</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/preprocessor/">Preprocessor directives</a></td></tr>
<tr><td class="folder">C++ Standard Library:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/files/">Input/Output with files</a></td></tr>
</tbody>
</table>
<div id="CH_subnav"></div>
<br>
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
/* single square */
google_ad_slot = "7465536459";
google_ad_width = 125;
google_ad_height = 125;
//-->
</script>
<script type="text/javascript" src="Classes%20%28II%29%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 125px; position: relative; visibility: visible; width: 125px;"><ins id="aswift_0_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 125px; position: relative; visibility: visible; width: 125px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_0" name="aswift_0" style="left: 0pt; position: absolute; top: 0pt;" width="125" frameborder="0" height="125" scrolling="no"></iframe></ins></ins>
	</td>
	<td id="CH_main">
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Classes%20%28II%29%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_1_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_1" name="aswift_1" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins><br><div class="C_doctop">
<h1>Classes (II)</h1>
<div class="right"></div>
</div>
<div class="docsubtop">
<div class="right"></div>
<div class="prototype"></div>
</div>
<h3>Overloading operators</h3>
C++ incorporates the option to use standard operators to perform
operations with classes in addition to with fundamental types. For
example:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><var>int</var> a, b, c;
a = b + c;</code></pre></td></tr></tbody></table></div>
<br>
<br>
This is obviously valid code in C++, since the different variables of
the addition are all fundamental types. Nevertheless, it is not so
obvious that we could perform an operation similar to the following one:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br></tt></td>
<td class="source"><pre><code><var>struct</var> {
  string product;
  <var>float</var> price;
} a, b, c;
a = b + c; </code></pre></td></tr></tbody></table></div>
<br>
<br>
In fact, this will cause a compilation error, since we have not defined
the behavior our class should have with addition operations. However,
thanks to the C++ feature to overload operators, we can design classes
able to perform operations using standard operators. Here is a list of
all the operators that can be overloaded:<br>
<br>
<table class="boxed"><tbody><tr><th>Overloadable operators</th></tr><tr><td>
<pre>+    -    *    /    =    &lt;    &gt;    +=   -=   *=   /=   &lt;&lt;   &gt;&gt;
&lt;&lt;=  &gt;&gt;=  ==   !=   &lt;=   &gt;=   ++   --   %    &amp;    ^    !    |
~    &amp;=   ^=   |=   &amp;&amp;   ||   %=   []   ()   ,    -&gt;*  -&gt;   new 
delete    new[]     delete[]
</pre>
</td></tr></tbody></table>
<br>
To overload an operator in order to use it with classes we declare <i>operator functions</i>, which are regular functions whose names are the <tt>operator</tt> keyword followed by the operator sign that we want to overload. The format is:<br>
<br>
<tt>
type operator sign (parameters) { /*...*/ }<br>
</tt>
<br>
Here you have an example that overloads the addition operator (<tt>+</tt>). We are going to create a class to store bidimensional vectors and then we are going to add two of them: <tt>a(3,1)</tt> and <tt>b(1,2)</tt>. The addition of two bidimensional vectors is an operation as simple as adding the two <tt>x</tt> coordinates to obtain the resulting <tt>x</tt> coordinate and adding the two <tt>y</tt> coordinates to obtain the resulting <tt>y</tt>. In this case the result will be <tt>(3+1,1+2) = (4,3)</tt>.<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br></tt></td>
<td class="source"><pre><code><cite>// vectors: overloading operators example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> CVector {
  <var>public</var>:
    <var>int</var> x,y;
    CVector () {};
    CVector (<var>int</var>,<var>int</var>);
    CVector <var>operator</var> + (CVector);
};

CVector::CVector (<var>int</var> a, <var>int</var> b) {
  x = a;
  y = b;
}

CVector CVector::<var>operator</var>+ (CVector param) {
  CVector temp;
  temp.x = x + param.x;
  temp.y = y + param.y;
  <var>return</var> (temp);
}

<var>int</var> main () {
  CVector a (3,1);
  CVector b (1,2);
  CVector c;
  c = a + b;
  cout &lt;&lt; c.x &lt;&lt; <kbd>","</kbd> &lt;&lt; c.y;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>4,3</samp></pre></td></tr></tbody></table></div>
<br>
<br>
It may be a little confusing to see so many times the <tt>CVector</tt> identifier. But, consider that some of them refer to the class name (type) <tt>CVector</tt> and some others are functions with that name (constructors must have the same name as the class). Do not confuse them:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>CVector (<var>int</var>, <var>int</var>);            <cite>// function name CVector (constructor)</cite>
CVector <var>operator</var>+ (CVector);   <cite>// function returns a CVector </cite></code></pre></td></tr></tbody></table></div>
<br>
<br>
The function <tt>operator+</tt> of class <tt>CVector</tt> is the one that is in charge of overloading the addition operator (<tt>+</tt>). This function can be called either implicitly using the operator, or explicitly using the function name:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>c = a + b;
c = a.<var>operator</var>+ (b);</code></pre></td></tr></tbody></table></div>
<br>
<br>
Both expressions are equivalent.<br>
<br>
Notice also that we have included the empty constructor (without parameters) and we have defined it with an empty block:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>CVector () { };</code></pre></td></tr></tbody></table></div>
<br>
<br>
This is necessary, since we have explicitly declared another constructor:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>CVector (<var>int</var>, <var>int</var>);</code></pre></td></tr></tbody></table></div>
<br>
<br>
And when we explicitly declare any constructor, with any number of
parameters, the default constructor with no parameters that the
compiler can declare automatically is not declared, so we need to
declare it ourselves in order to be able to construct objects of this
type without parameters. Otherwise, the declaration:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>CVector c;</code></pre></td></tr></tbody></table></div>
<br>
<br>
included in <tt>main()</tt> would not have been valid.<br>
<br>
Anyway, I have to warn you that an empty block is a bad implementation
for a constructor, since it does not fulfill the minimum functionality
that is generally expected from a constructor, which is the
initialization of all the member variables in its class. In our case
this constructor leaves the variables <tt>x</tt> and <tt>y</tt> undefined. Therefore, a more advisable definition would have been something similar to this:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>CVector () { x=0; y=0; };</code></pre></td></tr></tbody></table></div>
<br>
<br>
which in order to simplify and show only the point of the code I have not included in the example.<br>
<br>
As well as a class includes a default constructor and a copy
constructor even if they are not declared, it also includes a default
definition for the assignment operator (<tt>=</tt>)
with the class itself as parameter. The behavior which is defined by
default is to copy the whole content of the data members of the object
passed as argument (the one at the right side of the sign) to the one
at the left side:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br></tt></td>
<td class="source"><pre><code>CVector d (2,3);
CVector e;
e = d;           <cite>// copy assignment operator </cite></code></pre></td></tr></tbody></table></div>
<br>
<br>
The copy assignment operator function is the only operator member
function implemented by default. Of course, you can redefine it to any
other functionality that you want, like for example, copy only certain
class members or perform additional initialization procedures.<br>
<br>
The overload of operators does not force its operation to bear a
relation to the mathematical or usual meaning of the operator, although
it is recommended. For example, the code may not be very intuitive if
you use <tt>operator +</tt> to subtract two classes or <tt>operator==</tt> to fill with zeros a class, although it is perfectly possible to do so.<br>
<br>
Although the prototype of a function <tt>operator+</tt> can seem
obvious since it takes what is at the right side of the operator as the
parameter for the operator member function of the object at its left
side, other operators may not be so obvious. Here you have a table with
a summary on how the different operator functions have to be declared
(replace @ by the operator in each case):<br>
<br>
<table class="boxed">
<tbody><tr><th>Expression</th><th>Operator</th><th>Member function</th><th>Global function</th></tr>
<tr><td>@a</td><td>+ - * &amp; ! ~ ++ --</td><td>A::operator@()</td><td>operator@(A)</td></tr>
<tr><td>a@</td><td>++ --</td><td>A::operator@(int)</td><td>operator@(A,int)</td></tr>
<tr><td>a@b</td><td>+ - * / % ^ &amp; | &lt; &gt; == != &lt;= &gt;= &lt;&lt; &gt;&gt; &amp;&amp; || ,</td><td>A::operator@ (B)</td><td>operator@(A,B)</td></tr>
<tr><td>a@b</td><td>= += -= *= /= %= ^= &amp;= |= &lt;&lt;= &gt;&gt;= []</td><td>A::operator@ (B)</td><td>-</td></tr>
<tr><td>a(b, c...)</td><td>()</td><td>A::operator() (B, C...)</td><td>-</td></tr>
<tr><td>a-&gt;x</td><td>-&gt;</td><td>A::operator-&gt;()</td><td>-</td></tr>
</tbody></table>
Where <tt>a</tt> is an object of class <tt>A</tt>, <tt>b</tt> is an object of class <tt>B</tt> and <tt>c</tt> is an object of class <tt>C</tt>.<br>
<br>
You can see in this panel that there are two ways to overload some
class operators: as a member function and as a global function. Its use
is indistinct, nevertheless I remind you that functions that are not
members of a class cannot access the private or protected members of
that class unless the global function is its friend (friendship is
explained later).<br>
<br>
<a name="this"></a><h3>The keyword this</h3>
The keyword <tt>this</tt> represents a pointer to the object whose member function is being executed. It is a pointer to the object itself.<br>
<br>
One of its uses can be to check if a parameter passed to a member function is the object itself. For example,<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></tt></td>
<td class="source"><pre><code><cite>// this</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> CDummy {
  <var>public</var>:
    <var>int</var> isitme (CDummy&amp; param);
};

<var>int</var> CDummy::isitme (CDummy&amp; param)
{
  <var>if</var> (&amp;param == <var>this</var>) <var>return</var> <var>true</var>;
  <var>else</var> <var>return</var> <var>false</var>;
}

<var>int</var> main () {
  CDummy a;
  CDummy* b = &amp;a;
  <var>if</var> ( b-&gt;isitme(a) )
    cout &lt;&lt; <kbd>"yes, &amp;a is b"</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>yes, &amp;a is b</samp></pre></td></tr></tbody></table></div>
<br>
<br>
It is also frequently used in <tt>operator=</tt> member functions
that return objects by reference (avoiding the use of temporary
objects). Following with the vector's examples seen before we could
have written an <tt>operator=</tt> function similar to this one:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br></tt></td>
<td class="source"><pre><code>CVector&amp; CVector::<var>operator</var>= (<var>const</var> CVector&amp; param)
{
  x=param.x;
  y=param.y;
  <var>return</var> *<var>this</var>;
}</code></pre></td></tr></tbody></table></div>
<br>
<br>
In fact this function is very similar to the code that the compiler generates implicitly for this class if we do not include an <tt>operator=</tt> member function to copy objects of this class.<br>
<br>
<a name="static"></a><h3>Static members</h3>
A class can contain <i>static</i> members, either data or functions.<br>
<br>
Static data members of a class are also known as "class variables",
because there is only one unique value for all the objects of that same
class. Their content is not different from one object of this class to
another. <br>
<br>
For example, it may be used for a variable within a class that can
contain a counter with the number of objects of that class that are
currently allocated, as in the following example:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></tt></td>
<td class="source"><pre><code><cite>// static members in classes</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> CDummy {
  <var>public</var>:
    <var>static</var> <var>int</var> n;
    CDummy () { n++; };
    ~CDummy () { n--; };
};

<var>int</var> CDummy::n=0;

<var>int</var> main () {
  CDummy a;
  CDummy b[5];
  CDummy * c = <var>new</var> CDummy;
  cout &lt;&lt; a.n &lt;&lt; endl;
  <var>delete</var> c;
  cout &lt;&lt; CDummy::n &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>7
6</samp></pre></td></tr></tbody></table></div>
<br>
<br>
In fact, static members have the same properties as global variables
but they enjoy class scope. For that reason, and to avoid them to be
declared several times, we can only include the prototype (its
declaration) in the class declaration but not its definition (its
initialization). In order to initialize a static data-member we must
include a formal definition outside the class, in the global scope, as
in the previous example:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code><var>int</var> CDummy::n=0;</code></pre></td></tr></tbody></table></div>
<br>
<br>
Because it is a unique variable value for all the objects of the same
class, it can be referred to as a member of any object of that class or
even directly by the class name (of course this is only valid for
static members):<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>cout &lt;&lt; a.n;
cout &lt;&lt; CDummy::n; </code></pre></td></tr></tbody></table></div>
<br>
<br>
These two calls included in the previous example are referring to the same variable: the static variable <tt>n</tt> within class <tt>CDummy</tt> shared by all objects of this class.<br>
<br>
Once again, I remind you that in fact it is a global variable. The only
difference is its name and possible access restrictions outside its
class.<br>
<br>
Just as we may include static data within a class, we can also include
static functions. They represent the same: they are global functions
that are called as if they were object members of a given class. They
can only refer to static data, in no case to non-static members of the
class, as well as they do not allow the use of the keyword <tt>this</tt>,
since it makes reference to an object pointer and these functions in
fact are not members of any object but direct members of the class.<br>
<table class="C_docPrevNext"><tbody><tr><td class="prev"><a href="http://www.cplusplus.com/doc/tutorial/classes/" rel="prev"><img src="Classes%20%28II%29%20-%20C++%20Documentation_files/navigate_previous.gif" alt="Previous">Previous:<br><b>Classes (I)</b></a></td><td class="index"><a href="http://www.cplusplus.com/doc/tutorial/" rel="index"><img src="Classes%20%28II%29%20-%20C++%20Documentation_files/navigate_index.gif" alt="Index">Index</a></td><td class="next"><a href="http://www.cplusplus.com/doc/tutorial/inheritance/" rel="next"><img src="Classes%20%28II%29%20-%20C++%20Documentation_files/navigate_next.gif" alt="Next">Next:<br><b>Friendship and inheritance</b></a></td></tr></tbody></table><div id="CH_bb"></div><script type="text/javascript">new doc_Page('CH_bb','/doc/item.cgi',16,0,0,32768);</script>
<p>

<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Classes%20%28II%29%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_2_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_2" name="aswift_2" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins>
</p></td></tr></tbody></table>
</div>
<div id="CH_footer">
	<a href="http://www.cplusplus.com/">Home page</a> | <a href="http://www.cplusplus.com/privacy.do">Privacy policy</a><br>© cplusplus.com, 2000-2011 - All rights reserved - <i>v2.9</i><br><a href="http://www.cplusplus.com/contact.do?referrer=http%3A%2F%2Fwww.cplusplus.com%2Fdoc%2Ftutorial%2Fclasses2%2F">Spotted an error? contact us</a>
</div>

<script src="Classes%20%28II%29%20-%20C++%20Documentation_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
onPrint.print();
var gso = new Session ('ssn29','rel29',14400,86400,1313153551);
_uacct = "UA-521783-1";
urchinTracker();
</script>
</body></html>