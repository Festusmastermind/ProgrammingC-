<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>


<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Polymorphism - C++ Documentation</title>
<style type="text/css">.hierarchy DIV {width:100px; height:24px; text-align:center; padding-top:8px; border:black 1px solid} </style>
<link rel="shortcut icon" type="image/x-icon" href="http://www.cplusplus.com/favicon.ico">
<link rel="stylesheet" type="text/css" href="Polymorphism%20-%20C++%20Documentation_files/main29f.css">
<script src="Polymorphism%20-%20C++%20Documentation_files/main29f.js" type="text/javascript"></script>
<script type="text/javascript">
new LoginBox('CH_boxLogin',1);</script>
</head><body>
<div id="CH_header">
	<a href="http://www.cplusplus.com/"><img src="Polymorphism%20-%20C++%20Documentation_files/cpp-logo.png" alt="cplusplus.com" width="198" height="75"></a>
	<div id="CH_bar">
		<b><a href="http://www.cplusplus.com/">C++</a> : <a href="http://www.cplusplus.com/doc/">Documentation</a> : <a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a> : Polymorphism</b>
	</div>
	
	<div id="CH_searchbox">
		<form id="search" action="/search.do" method="get">
		Search: <input name="q" size="13" class="txt"> <input value="Search" class="btn" type="submit">
		</form>
	</div>
	<div id="CH_boxLogin"><div class="C_LoginBox"><form style="display: block;" name="CH_frmLogin" id="CH_frmLogin" action="/user/access.cgi" onsubmit="elCH_boxLogin.send(); return false;" method="post"><table><tbody><tr><td></td><td class="right"><b>login:</b></td><td><input name="w" value="login" type="hidden"><input name="y" value="1" type="hidden"><input name="to" value="http://www.cplusplus.com/doc/tutorial/polymorphism/" type="hidden"><input class="txt" name="l" size="4" title="Type user name" type="text"></td><td><input class="txt" name="p" size="4" title="Type password" type="password"></td><td><input class="btn" value="sign in" type="submit"></td></tr><tr><td>sign in using:<a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=google&amp;to=%2Fdoc%2Ftutorial%2Fpolymorphism%2F" title="Sign in using your google account"><img src="Polymorphism%20-%20C++%20Documentation_files/16google.png" width="16" height="16"></a><a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=yahoo&amp;to=%2Fdoc%2Ftutorial%2Fpolymorphism%2F" title="Sign in using your Yahoo! account"><img src="Polymorphism%20-%20C++%20Documentation_files/16yahoo.png" width="16" height="16"></a></td><td colspan="4" class="right"><label for="rememberme">remember me<input class="chk" name="rememberme" id="rememberme" value="1" type="checkbox"> &nbsp; [<a href="http://www.cplusplus.com/user/access.cgi?w=signup">register</a>]</label></td></tr></tbody></table></form><div id="CH_insLogin"></div></div></div>
</div>
<div id="CH_container">
<table id="CH_containertbl"><tbody><tr>
<td id="CH_nav">
<table class="box">
<thead>
<tr><th><a href="http://www.cplusplus.com/">cplusplus.com</a></th></tr>
</thead>
<tbody>
<tr><td class="folder"><a href="http://www.cplusplus.com/info/">Information</a></td></tr>
<tr><td class="folder selected"><a href="http://www.cplusplus.com/doc/">Documentation</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/reference/">Reference</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/articles/">Articles</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/forum/">Forum</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/">Documentation</a></th></tr></thead>
<tbody><tr><td class="selected folder"><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/ascii/">Ascii Codes</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/boolean/">Boolean Operations</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/hex/">Numerical Bases</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></th></tr></thead>
<tbody><tr><td class="folder">Introduction:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/introduction/">Instructions for use</a></td></tr>
<tr><td class="folder">Basics of C++:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/program_structure/">Structure of a program</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/variables/">Variables. Data Types.</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/constants/">Constants</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/operators/">Operators</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/basic_io/">Basic Input/Output</a></td></tr>
<tr><td class="folder">Control Structures:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/control/">Control Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions/">Functions (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions2/">Functions (II)</a></td></tr>
<tr><td class="folder">Compound Data Types:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/arrays/">Arrays</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/ntcs/">Character Sequences</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/pointers/">Pointers</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/dynamic/">Dynamic Memory</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/structures/">Data Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/other_data_types/">Other Data Types</a></td></tr>
<tr><td class="folder">Object Oriented Programming:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes/">Classes (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes2/">Classes (II)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/inheritance/">Friendship and inheritance</a></td></tr>
<tr><td class="selected indent"><a href="http://www.cplusplus.com/doc/tutorial/polymorphism/">Polymorphism</a></td></tr>
<tr><td class="folder">Advanced Concepts:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/templates/">Templates</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/namespaces/">Namespaces</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/exceptions/">Exceptions</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/typecasting/">Type Casting</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/preprocessor/">Preprocessor directives</a></td></tr>
<tr><td class="folder">C++ Standard Library:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/files/">Input/Output with files</a></td></tr>
</tbody>
</table>
<div id="CH_subnav"></div>
<br>
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
/* single square */
google_ad_slot = "7465536459";
google_ad_width = 125;
google_ad_height = 125;
//-->
</script>
<script type="text/javascript" src="Polymorphism%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 125px; position: relative; visibility: visible; width: 125px;"><ins id="aswift_0_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 125px; position: relative; visibility: visible; width: 125px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_0" name="aswift_0" style="left: 0pt; position: absolute; top: 0pt;" width="125" frameborder="0" height="125" scrolling="no"></iframe></ins></ins>
	</td>
	<td id="CH_main">
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Polymorphism%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_1_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_1" name="aswift_1" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins><br><div class="C_doctop">
<h1>Polymorphism</h1>
<div class="right"></div>
</div>
<div class="docsubtop">
<div class="right"></div>
<div class="prototype"></div>
</div>
Before getting into this section, it is recommended that you have a
proper understanding of pointers and class inheritance. If any of the
following statements seem strange to you, you should review the
indicated sections:<br>
<br>
<table class="boxed">
<tbody><tr><th>Statement:</th><th>Explained in:</th></tr>
<tr><td>int a::b(int c) { }</td><td>Classes</td></tr>
<tr><td>a-&gt;b</td><td>Data Structures</td></tr>
<tr><td>class a: public b { };</td><td>Friendship and inheritance</td></tr>
</tbody></table>
<br>
<h3>Pointers to base class</h3>
One of the key features of derived classes is that a pointer to a
derived class is type-compatible with a pointer to its base class.
Polymorphism is the art of taking advantage of this simple but powerful
and versatile feature, that brings Object Oriented Methodologies to its
full potential.<br>
<br>
We are going to start by rewriting our program about the rectangle and
the triangle of the previous section taking into consideration this
pointer compatibility property:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br></tt></td>
<td class="source"><pre><code><cite>// pointers to base class</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> CPolygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var> a, <var>int</var> b)
      { width=a; height=b; }
  };

<var>class</var> CRectangle: <var>public</var> CPolygon {
  <var>public</var>:
    <var>int</var> area ()
      { <var>return</var> (width * height); }
  };

<var>class</var> CTriangle: <var>public</var> CPolygon {
  <var>public</var>:
    <var>int</var> area ()
      { <var>return</var> (width * height / 2); }
  };

<var>int</var> main () {
  CRectangle rect;
  CTriangle trgl;
  CPolygon * ppoly1 = &amp;rect;
  CPolygon * ppoly2 = &amp;trgl;
  ppoly1-&gt;set_values (4,5);
  ppoly2-&gt;set_values (4,5);
  cout &lt;&lt; rect.area() &lt;&lt; endl;
  cout &lt;&lt; trgl.area() &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>20
10</samp></pre></td></tr></tbody></table></div>
<br>
<br>
In function <tt>main</tt>, we create two pointers that point to objects of class <tt>CPolygon</tt> (<tt>ppoly1</tt> and <tt>ppoly2</tt>). Then we assign references to <tt>rect</tt> and <tt>trgl</tt> to these pointers, and because both are objects of classes derived from <tt>CPolygon</tt>, both are valid assignment operations.<br>
<br>
The only limitation in using <tt>*ppoly1</tt> and <tt>*ppoly2</tt> instead of <tt>rect</tt> and <tt>trgl</tt> is that both <tt>*ppoly1</tt> and <tt>*ppoly2</tt> are of type <tt>CPolygon*</tt> and therefore we can only use these pointers to refer to the members that <tt>CRectangle</tt> and <tt>CTriangle</tt> inherit from <tt>CPolygon</tt>. For that reason when we call the <tt>area()</tt> members at the end of the program we have had to use directly the objects <tt>rect</tt> and <tt>trgl</tt> instead of the pointers <tt>*ppoly1</tt> and <tt>*ppoly2</tt>.<br>
<br>
In order to use <tt>area()</tt> with the pointers to class <tt>CPolygon</tt>, this member should also have been declared in the class <tt>CPolygon</tt>, and not only in its derived classes, but the problem is that <tt>CRectangle</tt> and <tt>CTriangle</tt> implement different versions of <tt>area</tt>, therefore we cannot implement it in the base class. This is when virtual members become handy:<br>
<br>
<a name="virtual"></a><h3>Virtual members</h3>
A member of a class that can be redefined in its derived classes is
known as a virtual member. In order to declare a member of a class as
virtual, we must precede its declaration with the keyword <tt>virtual</tt>:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br></tt></td>
<td class="source"><pre><code><cite>// virtual members</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> CPolygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var> a, <var>int</var> b)
      { width=a; height=b; }
    <var>virtual</var> <var>int</var> area ()
      { <var>return</var> (0); }
  };

<var>class</var> CRectangle: <var>public</var> CPolygon {
  <var>public</var>:
    <var>int</var> area ()
      { <var>return</var> (width * height); }
  };

<var>class</var> CTriangle: <var>public</var> CPolygon {
  <var>public</var>:
    <var>int</var> area ()
      { <var>return</var> (width * height / 2); }
  };

<var>int</var> main () {
  CRectangle rect;
  CTriangle trgl;
  CPolygon poly;
  CPolygon * ppoly1 = &amp;rect;
  CPolygon * ppoly2 = &amp;trgl;
  CPolygon * ppoly3 = &amp;poly;
  ppoly1-&gt;set_values (4,5);
  ppoly2-&gt;set_values (4,5);
  ppoly3-&gt;set_values (4,5);
  cout &lt;&lt; ppoly1-&gt;area() &lt;&lt; endl;
  cout &lt;&lt; ppoly2-&gt;area() &lt;&lt; endl;
  cout &lt;&lt; ppoly3-&gt;area() &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>20
10
0</samp></pre></td></tr></tbody></table></div>
<br>
<br>
Now the three classes (<tt>CPolygon</tt>, <tt>CRectangle</tt> and <tt>CTriangle</tt>) have all the same members: <tt>width</tt>, <tt>height</tt>, <tt>set_values()</tt> and <tt>area()</tt>.<br>
<br>
The member function <tt>area()</tt> has been declared as virtual
in the base class because it is later redefined in each derived class.
You can verify if you want that if you remove this <tt>virtual</tt> keyword from the declaration of <tt>area()</tt> within <tt>CPolygon</tt>, and then you run the program the result will be <tt>0</tt> for the three polygons instead of <tt>20</tt>, <tt>10</tt> and <tt>0</tt>. That is because instead of calling the corresponding <tt>area()</tt> function for each object (<tt>CRectangle::area()</tt>, <tt>CTriangle::area()</tt> and <tt>CPolygon::area()</tt>, respectively), <tt>CPolygon::area()</tt> will be called in all cases since the calls are via a pointer whose type is <tt>CPolygon*</tt>.<br>
<br>
Therefore, what the <tt>virtual</tt> keyword does is to allow a
member of a derived class with the same name as one in the base class
to be appropriately called from a pointer, and more precisely when the
type of the pointer is a pointer to the base class but is pointing to
an object of the derived class, as in the above example.<br>
<br>
A class that declares or inherits a virtual function is called a <i>polymorphic class</i>.<br>
<br>
Note that despite of its virtuality, we have also been able to declare an object of type <tt>CPolygon</tt> and to call its own <tt>area()</tt> function, which always returns 0.<br>
<br>
<a name="abstract"></a><h3>Abstract base classes</h3>
Abstract base classes are something very similar to our <tt>CPolygon</tt> class of our previous example. The only difference is that in our previous example we have defined a valid <tt>area()</tt> function with a minimal functionality for objects that were of class <tt>CPolygon</tt> (like the object <tt>poly</tt>), whereas in an abstract base classes we could leave that <tt>area()</tt> member function without implementation at all. This is done by appending <tt>=0</tt> (equal to zero) to the function declaration. <br>
<br>
An abstract base CPolygon class could look like this:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></tt></td>
<td class="source"><pre><code><cite>// abstract class CPolygon</cite>
<var>class</var> CPolygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var> a, <var>int</var> b)
      { width=a; height=b; }
    <var>virtual</var> <var>int</var> area () =0;
};</code></pre></td></tr></tbody></table></div>
<br>
<br>
Notice how we appended <tt>=0</tt> to <tt>virtual int area ()</tt> instead of specifying an implementation for the function. This type of function is called a <i>pure virtual function</i>, and all classes that contain at least one pure virtual function are <i>abstract base classes</i>.<br>
<br>
The main difference between an abstract base class and a regular
polymorphic class is that because in abstract base classes at least one
of its members lacks implementation we cannot create instances
(objects) of it.<br>
<br>
But a class that cannot instantiate objects is not totally useless. We
can create pointers to it and take advantage of all its polymorphic
abilities. Therefore a declaration like: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>CPolygon poly;</code></pre></td></tr></tbody></table></div>
<br>
<br>
would not be valid for the abstract base class we have just declared,
because tries to instantiate an object. Nevertheless, the following
pointers:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>CPolygon * ppoly1;
CPolygon * ppoly2;</code></pre></td></tr></tbody></table></div>
<br>
<br>
would be perfectly valid.<br>
<br>
This is so for as long as <tt>CPolygon</tt> includes a pure
virtual function and therefore it's an abstract base class. However,
pointers to this abstract base class can be used to point to objects of
derived classes.<br>
<br>
Here you have the complete example: <br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br></tt></td>
<td class="source"><pre><code><cite>// abstract base class</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> CPolygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var> a, <var>int</var> b)
      { width=a; height=b; }
    <var>virtual</var> <var>int</var> area (<var>void</var>) =0;
  };

<var>class</var> CRectangle: <var>public</var> CPolygon {
  <var>public</var>:
    <var>int</var> area (<var>void</var>)
      { <var>return</var> (width * height); }
  };

<var>class</var> CTriangle: <var>public</var> CPolygon {
  <var>public</var>:
    <var>int</var> area (<var>void</var>)
      { <var>return</var> (width * height / 2); }
  };

<var>int</var> main () {
  CRectangle rect;
  CTriangle trgl;
  CPolygon * ppoly1 = &amp;rect;
  CPolygon * ppoly2 = &amp;trgl;
  ppoly1-&gt;set_values (4,5);
  ppoly2-&gt;set_values (4,5);
  cout &lt;&lt; ppoly1-&gt;area() &lt;&lt; endl;
  cout &lt;&lt; ppoly2-&gt;area() &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>20
10</samp></pre></td></tr></tbody></table></div>
<br>
<br>
If you review the program you will notice that we refer to objects of
different but related classes using a unique type of pointer (<tt>CPolygon*</tt>). This can be tremendously useful. For example, now we can create a function member of the abstract base class <tt>CPolygon</tt> that is able to print on screen the result of the <tt>area()</tt> function even though <tt>CPolygon</tt> itself has no implementation for this function:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br></tt></td>
<td class="source"><pre><code><cite>// pure virtual members can be called</cite>
<cite>// from the abstract base class</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> CPolygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var> a, <var>int</var> b)
      { width=a; height=b; }
    <var>virtual</var> <var>int</var> area (<var>void</var>) =0;
    <var>void</var> printarea (<var>void</var>)
      { cout &lt;&lt; <var>this</var>-&gt;area() &lt;&lt; endl; }
  };

<var>class</var> CRectangle: <var>public</var> CPolygon {
  <var>public</var>:
    <var>int</var> area (<var>void</var>)
      { <var>return</var> (width * height); }
  };

<var>class</var> CTriangle: <var>public</var> CPolygon {
  <var>public</var>:
    <var>int</var> area (<var>void</var>)
      { <var>return</var> (width * height / 2); }
  };

<var>int</var> main () {
  CRectangle rect;
  CTriangle trgl;
  CPolygon * ppoly1 = &amp;rect;
  CPolygon * ppoly2 = &amp;trgl;
  ppoly1-&gt;set_values (4,5);
  ppoly2-&gt;set_values (4,5);
  ppoly1-&gt;printarea();
  ppoly2-&gt;printarea();
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>20
10</samp></pre></td></tr></tbody></table></div>
<br>
<br>
Virtual members and abstract classes grant C++ the polymorphic
characteristics that make object-oriented programming such a useful
instrument in big projects. Of course, we have seen very simple uses of
these features, but these features can be applied to arrays of objects
or dynamically allocated objects.<br>
<br>
Let's end with the same example again, but this time with objects that are dynamically allocated:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br></tt></td>
<td class="source"><pre><code><cite>// dynamic allocation and polymorphism</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> CPolygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var> a, <var>int</var> b)
      { width=a; height=b; }
    <var>virtual</var> <var>int</var> area (<var>void</var>) =0;
    <var>void</var> printarea (<var>void</var>)
      { cout &lt;&lt; <var>this</var>-&gt;area() &lt;&lt; endl; }
  };

<var>class</var> CRectangle: <var>public</var> CPolygon {
  <var>public</var>:
    <var>int</var> area (<var>void</var>)
      { <var>return</var> (width * height); }
  };

<var>class</var> CTriangle: <var>public</var> CPolygon {
  <var>public</var>:
    <var>int</var> area (<var>void</var>)
      { <var>return</var> (width * height / 2); }
  };

<var>int</var> main () {
  CPolygon * ppoly1 = <var>new</var> CRectangle;
  CPolygon * ppoly2 = <var>new</var> CTriangle;
  ppoly1-&gt;set_values (4,5);
  ppoly2-&gt;set_values (4,5);
  ppoly1-&gt;printarea();
  ppoly2-&gt;printarea();
  <var>delete</var> ppoly1;
  <var>delete</var> ppoly2;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>20
10</samp></pre></td></tr></tbody></table></div>
<br>
<br>
Notice that the <tt>ppoly</tt> pointers:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>CPolygon * ppoly1 = <var>new</var> CRectangle;
CPolygon * ppoly2 = <var>new</var> CTriangle;</code></pre></td></tr></tbody></table></div>
<br>
<br>
are declared being of type pointer to <tt>CPolygon</tt> but the objects dynamically allocated have been declared having the derived class type directly.<br>
<table class="C_docPrevNext"><tbody><tr><td class="prev"><a href="http://www.cplusplus.com/doc/tutorial/inheritance/" rel="prev"><img src="Polymorphism%20-%20C++%20Documentation_files/navigate_previous.gif" alt="Previous">Previous:<br><b>Friendship and inheritance</b></a></td><td class="index"><a href="http://www.cplusplus.com/doc/tutorial/" rel="index"><img src="Polymorphism%20-%20C++%20Documentation_files/navigate_index.gif" alt="Index">Index</a></td><td class="next"><a href="http://www.cplusplus.com/doc/tutorial/templates/" rel="next"><img src="Polymorphism%20-%20C++%20Documentation_files/navigate_next.gif" alt="Next">Next:<br><b>Templates</b></a></td></tr></tbody></table><div id="CH_bb"></div><script type="text/javascript">new doc_Page('CH_bb','/doc/item.cgi',18,0,0,32768);</script>
<p>

<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Polymorphism%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_2_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_2" name="aswift_2" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins>
</p></td></tr></tbody></table>
</div>
<div id="CH_footer">
	<a href="http://www.cplusplus.com/">Home page</a> | <a href="http://www.cplusplus.com/privacy.do">Privacy policy</a><br>© cplusplus.com, 2000-2011 - All rights reserved - <i>v2.9</i><br><a href="http://www.cplusplus.com/contact.do?referrer=http%3A%2F%2Fwww.cplusplus.com%2Fdoc%2Ftutorial%2Fpolymorphism%2F">Spotted an error? contact us</a>
</div>

<script src="Polymorphism%20-%20C++%20Documentation_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
onPrint.print();
var gso = new Session ('ssn29','rel29',14400,86400,1313153554);
_uacct = "UA-521783-1";
urchinTracker();
</script>
</body></html>