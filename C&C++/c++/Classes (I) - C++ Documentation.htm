<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>


<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Classes (I) - C++ Documentation</title>
<style type="text/css">.hierarchy DIV {width:100px; height:24px; text-align:center; padding-top:8px; border:black 1px solid} </style>
<link rel="shortcut icon" type="image/x-icon" href="http://www.cplusplus.com/favicon.ico">
<link rel="stylesheet" type="text/css" href="Classes%20%28I%29%20-%20C++%20Documentation_files/main29f.css">
<script src="Classes%20%28I%29%20-%20C++%20Documentation_files/main29f.js" type="text/javascript"></script>
<script type="text/javascript">
new LoginBox('CH_boxLogin',1);</script>
</head><body>
<div id="CH_header">
	<a href="http://www.cplusplus.com/"><img src="Classes%20%28I%29%20-%20C++%20Documentation_files/cpp-logo.png" alt="cplusplus.com" width="198" height="75"></a>
	<div id="CH_bar">
		<b><a href="http://www.cplusplus.com/">C++</a> : <a href="http://www.cplusplus.com/doc/">Documentation</a> : <a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a> : Classes (I)</b>
	</div>
	
	<div id="CH_searchbox">
		<form id="search" action="/search.do" method="get">
		Search: <input name="q" size="13" class="txt"> <input value="Search" class="btn" type="submit">
		</form>
	</div>
	<div id="CH_boxLogin"><div class="loginmessage">&nbsp;<img src="Classes%20%28I%29%20-%20C++%20Documentation_files/waitblue.gif"></div>
	</div>
</div>
<div id="CH_container">
<table id="CH_containertbl"><tbody><tr>
<td id="CH_nav">
<table class="box">
<thead>
<tr><th><a href="http://www.cplusplus.com/">cplusplus.com</a></th></tr>
</thead>
<tbody>
<tr><td class="folder"><a href="http://www.cplusplus.com/info/">Information</a></td></tr>
<tr><td class="folder selected"><a href="http://www.cplusplus.com/doc/">Documentation</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/reference/">Reference</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/articles/">Articles</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/forum/">Forum</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/">Documentation</a></th></tr></thead>
<tbody><tr><td class="selected folder"><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/ascii/">Ascii Codes</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/boolean/">Boolean Operations</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/hex/">Numerical Bases</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></th></tr></thead>
<tbody><tr><td class="folder">Introduction:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/introduction/">Instructions for use</a></td></tr>
<tr><td class="folder">Basics of C++:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/program_structure/">Structure of a program</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/variables/">Variables. Data Types.</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/constants/">Constants</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/operators/">Operators</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/basic_io/">Basic Input/Output</a></td></tr>
<tr><td class="folder">Control Structures:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/control/">Control Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions/">Functions (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions2/">Functions (II)</a></td></tr>
<tr><td class="folder">Compound Data Types:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/arrays/">Arrays</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/ntcs/">Character Sequences</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/pointers/">Pointers</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/dynamic/">Dynamic Memory</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/structures/">Data Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/other_data_types/">Other Data Types</a></td></tr>
<tr><td class="folder">Object Oriented Programming:</td></tr>
<tr><td class="selected indent"><a href="http://www.cplusplus.com/doc/tutorial/classes/">Classes (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes2/">Classes (II)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/inheritance/">Friendship and inheritance</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/polymorphism/">Polymorphism</a></td></tr>
<tr><td class="folder">Advanced Concepts:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/templates/">Templates</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/namespaces/">Namespaces</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/exceptions/">Exceptions</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/typecasting/">Type Casting</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/preprocessor/">Preprocessor directives</a></td></tr>
<tr><td class="folder">C++ Standard Library:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/files/">Input/Output with files</a></td></tr>
</tbody>
</table>
<div id="CH_subnav"></div>
<br>
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
/* single square */
google_ad_slot = "7465536459";
google_ad_width = 125;
google_ad_height = 125;
//-->
</script>
<script type="text/javascript" src="Classes%20%28I%29%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 125px; position: relative; visibility: visible; width: 125px;"><ins id="aswift_0_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 125px; position: relative; visibility: visible; width: 125px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_0" name="aswift_0" style="left: 0pt; position: absolute; top: 0pt;" width="125" frameborder="0" height="125" scrolling="no"></iframe></ins></ins>
	</td>
	<td id="CH_main">
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Classes%20%28I%29%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_1_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_1" name="aswift_1" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins><br><div class="C_doctop">
<h1>Classes (I)</h1>
<div class="right"></div>
</div>
<div class="docsubtop">
<div class="right"></div>
<div class="prototype"></div>
</div>
A <i>class</i> is an expanded concept of a data structure: instead of holding only data, it can hold both data and functions.<br>
<br>
An <i>object</i> is an instantiation of a class. In terms of variables, a class would be the type, and an object would be the variable.<br>
<br>
Classes are generally declared using the keyword <tt>class</tt>, with the following format:<br>
<br>
<pre>class class_name {
  access_specifier_1:
    member1;
  access_specifier_2:
    member2;
  ...
  } object_names;
</pre>
<br>
Where <tt>class_name</tt> is a valid identifier for the class, <tt>object_names</tt>
is an optional list of names for objects of this class. The body of the
declaration can contain members, that can be either data or function
declarations, and optionally access specifiers.<br>
<br>
All is very similar to the declaration on data structures, except that
we can now include also functions and members, but also this new thing
called <i>access specifier</i>. An access specifier is one of the following three keywords: <tt>private</tt>, <tt>public</tt> or <tt>protected</tt>. These specifiers modify the access rights that the members following them acquire:<br>
<br>
<ul>
<li><tt>private</tt> members of a class are accessible only from within other members of the same class or from their <i>friends</i>.</li>
<li><tt>protected</tt> members are accessible from members of their same class and from their friends, but also from members of their derived classes.</li>
<li>Finally, <tt>public</tt> members are accessible from anywhere where the object is visible.</li>
</ul>
<br>
By default, all members of a class declared with the <tt>class</tt>
keyword have private access for all its members. Therefore, any member
that is declared before one other class specifier automatically has
private access. For example: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br></tt></td>
<td class="source"><pre><code><var>class</var> CRectangle {
    <var>int</var> x, y;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var>,<var>int</var>);
    <var>int</var> area (<var>void</var>);
  } rect;</code></pre></td></tr></tbody></table></div>
<br>
<br>
Declares a class (i.e., a type) called <tt>CRectangle</tt> and an object (i.e., a variable) of this class called <tt>rect</tt>. This class contains four members: two data members of type <tt>int</tt> (member <tt>x</tt> and member <tt>y</tt>) with private access (because private is the default access level) and two member functions with public access: <tt>set_values()</tt> and <tt>area()</tt>, of which for now we have only included their declaration, not their definition.<br>
<br>
Notice the difference between the class name and the object name: In the previous example, <tt>CRectangle</tt> was the class name (i.e., the type), whereas <tt>rect</tt> was an object of type <tt>CRectangle</tt>. It is the same relationship <tt>int</tt> and <tt>a</tt> have in the following declaration:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code><var>int</var> a;</code></pre></td></tr></tbody></table></div>
<br>
<br>
where <tt>int</tt> is the type name (the class) and <tt>a</tt> is the variable name (the object). <br>
<br>
After the previous declarations of <tt>CRectangle</tt> and <tt>rect</tt>, we can refer within the body of the program to any of the public members of the object <tt>rect</tt> as if they were normal functions or normal variables, just by putting the object's name followed by a dot (<tt>.</tt>) and then the name of the member. All very similar to what we did with plain data structures before. For example: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>rect.set_values (3,4);
myarea = rect.area(); </code></pre></td></tr></tbody></table></div>
<br>
<br>
The only members of rect that we cannot access from the body of our program outside the class are <tt>x</tt> and <tt>y</tt>, since they have private access and they can only be referred from within other members of that same class.<br>
<br>
Here is the complete example of class CRectangle:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></tt></td>
<td class="source"><pre><code><cite>// classes example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> CRectangle {
    <var>int</var> x, y;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var>,<var>int</var>);
    <var>int</var> area () {<var>return</var> (x*y);}
};

<var>void</var> CRectangle::set_values (<var>int</var> a, <var>int</var> b) {
  x = a;
  y = b;
}

<var>int</var> main () {
  CRectangle rect;
  rect.set_values (3,4);
  cout &lt;&lt; <kbd>"area: "</kbd> &lt;&lt; rect.area();
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>area: 12</samp></pre></td></tr></tbody></table></div>
<br>
<br>
The most important new thing in this code is the operator of scope (<tt>::</tt>, two colons) included in the definition of <tt>set_values()</tt>. It is used to define a member of a class from outside the class definition itself.<br>
<br>
You may notice that the definition of the member function <tt>area()</tt> has been included directly within the definition of the <tt>CRectangle</tt> class given its extreme simplicity, whereas <tt>set_values()</tt>
has only its prototype declared within the class, but its definition is
outside it. In this outside definition, we must use the operator of
scope (<tt>::</tt>) to specify that we are defining a function that is a member of the class <tt>CRectangle</tt> and not a regular global function.<br>
<br>
The scope operator (<tt>::</tt>) specifies the class to which the
member being declared belongs, granting exactly the same scope
properties as if this function definition was directly included within
the class definition. For example, in the function <tt>set_values()</tt> of the previous code, we have been able to use the variables <tt>x</tt> and <tt>y</tt>, which are private members of class <tt>CRectangle</tt>, which means they are only accessible from other members of their class.<br>
 <br>
The only difference between defining a class member function completely
within its class or to include only the prototype and later its
definition, is that in the first case the function will automatically
be considered an inline member function by the compiler, while in the
second it will be a normal (not-inline) class member function, which in
fact supposes no difference in behavior.<br>
<br>
Members <tt>x</tt> and <tt>y</tt> have private access (remember
that if nothing else is said, all members of a class defined with
keyword class have private access). By declaring them private we deny
access to them from anywhere outside the class. This makes sense, since
we have already defined a member function to set values for those
members within the object: the member function <tt>set_values()</tt>.
Therefore, the rest of the program does not need to have direct access
to them. Perhaps in a so simple example as this, it is difficult to see
any utility in protecting those two variables, but in greater projects
it may be very important that values cannot be modified in an
unexpected way (unexpected from the point of view of the object).<br>
<br>
One of the greater advantages of a class is that, as any other type, we
can declare several objects of it. For example, following with the
previous example of class <tt>CRectangle</tt>, we could have declared the object <tt>rectb</tt> in addition to the object <tt>rect</tt>: <br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></tt></td>
<td class="source"><pre><code><cite>// example: one class, two objects</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> CRectangle {
    <var>int</var> x, y;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var>,<var>int</var>);
    <var>int</var> area () {<var>return</var> (x*y);}
};

<var>void</var> CRectangle::set_values (<var>int</var> a, <var>int</var> b) {
  x = a;
  y = b;
}

<var>int</var> main () {
  CRectangle rect, rectb;
  rect.set_values (3,4);
  rectb.set_values (5,6);
  cout &lt;&lt; <kbd>"rect area: "</kbd> &lt;&lt; rect.area() &lt;&lt; endl;
  cout &lt;&lt; <kbd>"rectb area: "</kbd> &lt;&lt; rectb.area() &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>rect area: 12
rectb area: 30  </samp></pre></td></tr></tbody></table></div>
<br>
<br>
In this concrete case, the class (type of the objects) to which we are talking about is <tt>CRectangle</tt>, of which there are two instances or objects: <tt>rect</tt> and <tt>rectb</tt>. Each one of them has its own member variables and member functions.<br>
<br>
Notice that the call to <tt>rect.area()</tt> does not give the same result as the call to <tt>rectb.area()</tt>. This is because each object of class CRectangle has its own variables <tt>x</tt> and <tt>y</tt>, as they, in some way, have also their own function members <tt>set_value()</tt> and <tt>area()</tt> that each uses its object's own variables to operate.<br>
<br>
That is the basic concept of <i>object-oriented programming</i>:
Data and functions are both members of the object. We no longer use
sets of global variables that we pass from one function to another as
parameters, but instead we handle objects that have their own data and
functions embedded as members. Notice that we have not had to give any
parameters in any of the calls to <tt>rect.area</tt> or <tt>rectb.area</tt>. Those member functions directly used the data members of their respective objects <tt>rect</tt> and <tt>rectb</tt>.<br>
<br>
<h3>Constructors and destructors</h3>
Objects generally need to initialize variables or assign dynamic memory
during their process of creation to become operative and to avoid
returning unexpected values during their execution. For example, what
would happen if in the previous example we called the member function <tt>area()</tt> before having called function <tt>set_values()</tt>? Probably we would have gotten an undetermined result since the members <tt>x</tt> and <tt>y</tt> would have never been assigned a value.<br>
<br>
In order to avoid that, a class can include a special function called <tt>constructor</tt>,
which is automatically called whenever a new object of this class is
created. This constructor function must have the same name as the
class, and cannot have any return type; not even <tt>void</tt>.<br>
<br>
We are going to implement <tt>CRectangle</tt> including a constructor: <br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></tt></td>
<td class="source"><pre><code><cite>// example: class constructor</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> CRectangle {
    <var>int</var> width, height;
  <var>public</var>:
    CRectangle (<var>int</var>,<var>int</var>);
    <var>int</var> area () {<var>return</var> (width*height);}
};

CRectangle::CRectangle (<var>int</var> a, <var>int</var> b) {
  width = a;
  height = b;
}

<var>int</var> main () {
  CRectangle rect (3,4);
  CRectangle rectb (5,6);
  cout &lt;&lt; <kbd>"rect area: "</kbd> &lt;&lt; rect.area() &lt;&lt; endl;
  cout &lt;&lt; <kbd>"rectb area: "</kbd> &lt;&lt; rectb.area() &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>rect area: 12
rectb area: 30  </samp></pre></td></tr></tbody></table></div>
<br>
<br>
As you can see, the result of this example is identical to the previous one. But now we have removed the member function <tt>set_values()</tt>, and have included instead a constructor that performs a similar action: it initializes the values of <tt>width</tt> and <tt>height</tt> with the parameters that are passed to it.<br>
<br>
Notice how these arguments are passed to the constructor at the moment at which the objects of this class are created:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>CRectangle rect (3,4);
CRectangle rectb (5,6);</code></pre></td></tr></tbody></table></div>
<br>
<br>
Constructors cannot be called explicitly as if they were regular member
functions. They are only executed when a new object of that class is
created.<br>
<br>
You can also see how neither the constructor prototype declaration
(within the class) nor the latter constructor definition include a
return value; not even <tt>void</tt>.<br>
<br>
The <i>destructor</i> fulfills the opposite functionality. It is
automatically called when an object is destroyed, either because its
scope of existence has finished (for example, if it was defined as a
local object within a function and the function ends) or because it is
an object dynamically assigned and it is released using the operator
delete.<br>
<br>
The destructor must have the same name as the class, but preceded with a tilde sign (<tt>~</tt>) and it must also return no value.<br>
<br>
The use of destructors is especially suitable when an object assigns
dynamic memory during its lifetime and at the moment of being destroyed
we want to release the memory that the object was allocated.<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br></tt></td>
<td class="source"><pre><code><cite>// example on constructors and destructors</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> CRectangle {
    <var>int</var> *width, *height;
  <var>public</var>:
    CRectangle (<var>int</var>,<var>int</var>);
    ~CRectangle ();
    <var>int</var> area () {<var>return</var> (*width * *height);}
};

CRectangle::CRectangle (<var>int</var> a, <var>int</var> b) {
  width = <var>new</var> <var>int</var>;
  height = <var>new</var> <var>int</var>;
  *width = a;
  *height = b;
}

CRectangle::~CRectangle () {
  <var>delete</var> width;
  <var>delete</var> height;
}

<var>int</var> main () {
  CRectangle rect (3,4), rectb (5,6);
  cout &lt;&lt; <kbd>"rect area: "</kbd> &lt;&lt; rect.area() &lt;&lt; endl;
  cout &lt;&lt; <kbd>"rectb area: "</kbd> &lt;&lt; rectb.area() &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>rect area: 12
rectb area: 30  </samp></pre></td></tr></tbody></table></div>
<br>
<br>
<h3>Overloading Constructors</h3>
Like any other function, a constructor can also be overloaded with more
than one function that have the same name but different types or number
of parameters. Remember that for overloaded functions the compiler will
call the one whose parameters match the arguments used in the function
call. In the case of constructors, which are automatically called when
an object is created, the one executed is the one that matches the
arguments passed on the object declaration:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></tt></td>
<td class="source"><pre><code><cite>// overloading class constructors</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> CRectangle {
    <var>int</var> width, height;
  <var>public</var>:
    CRectangle ();
    CRectangle (<var>int</var>,<var>int</var>);
    <var>int</var> area (<var>void</var>) {<var>return</var> (width*height);}
};

CRectangle::CRectangle () {
  width = 5;
  height = 5;
}

CRectangle::CRectangle (<var>int</var> a, <var>int</var> b) {
  width = a;
  height = b;
}

<var>int</var> main () {
  CRectangle rect (3,4);
  CRectangle rectb;
  cout &lt;&lt; <kbd>"rect area: "</kbd> &lt;&lt; rect.area() &lt;&lt; endl;
  cout &lt;&lt; <kbd>"rectb area: "</kbd> &lt;&lt; rectb.area() &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>rect area: 12
rectb area: 25  </samp></pre></td></tr></tbody></table></div>
<br>
<br>
In this case, <tt>rectb</tt> was declared without any arguments,
so it has been initialized with the constructor that has no parameters,
which initializes both <tt>width</tt> and <tt>height</tt> with a value of 5. <br>
<br>
<b>Important:</b> Notice how if we declare a new object and we want to
use its default constructor (the one without parameters), we do not
include parentheses <tt>()</tt>:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>CRectangle rectb;   <cite>// right</cite>
CRectangle rectb(); <cite>// wrong! </cite></code></pre></td></tr></tbody></table></div>
<br>
<br>
<h3>Default constructor</h3>
If you do not declare any constructors in a class definition, the
compiler assumes the class to have a default constructor with no
arguments. Therefore, after declaring a class like this one:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br></tt></td>
<td class="source"><pre><code><var></var></code></pre></td></tr></tbody></table></div></td></tr></tbody></table></div></body></html>