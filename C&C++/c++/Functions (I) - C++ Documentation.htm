<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>


<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Functions (I) - C++ Documentation</title>
<style type="text/css">.hierarchy DIV {width:100px; height:24px; text-align:center; padding-top:8px; border:black 1px solid} </style>
<link rel="shortcut icon" type="image/x-icon" href="http://www.cplusplus.com/favicon.ico">
<link rel="stylesheet" type="text/css" href="Functions%20%28I%29%20-%20C++%20Documentation_files/main29f.css">
<script src="Functions%20%28I%29%20-%20C++%20Documentation_files/main29f.js" type="text/javascript"></script>
<script type="text/javascript">
new LoginBox('CH_boxLogin',1);</script>
</head><body>
<div id="CH_header">
	<a href="http://www.cplusplus.com/"><img src="Functions%20%28I%29%20-%20C++%20Documentation_files/cpp-logo.png" alt="cplusplus.com" width="198" height="75"></a>
	<div id="CH_bar">
		<b><a href="http://www.cplusplus.com/">C++</a> : <a href="http://www.cplusplus.com/doc/">Documentation</a> : <a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a> : Functions (I)</b>
	</div>
	
	<div id="CH_searchbox">
		<form id="search" action="/search.do" method="get">
		Search: <input name="q" size="13" class="txt"> <input value="Search" class="btn" type="submit">
		</form>
	</div>
	<div id="CH_boxLogin"><div class="C_LoginBox"><form style="display: block;" name="CH_frmLogin" id="CH_frmLogin" action="/user/access.cgi" onsubmit="elCH_boxLogin.send(); return false;" method="post"><table><tbody><tr><td></td><td class="right"><b>login:</b></td><td><input name="w" value="login" type="hidden"><input name="y" value="1" type="hidden"><input name="to" value="http://www.cplusplus.com/doc/tutorial/functions/" type="hidden"><input class="txt" name="l" size="4" title="Type user name" type="text"></td><td><input class="txt" name="p" size="4" title="Type password" type="password"></td><td><input class="btn" value="sign in" type="submit"></td></tr><tr><td>sign in using:<a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=google&amp;to=%2Fdoc%2Ftutorial%2Ffunctions%2F" title="Sign in using your google account"><img src="Functions%20%28I%29%20-%20C++%20Documentation_files/16google.png" width="16" height="16"></a><a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=yahoo&amp;to=%2Fdoc%2Ftutorial%2Ffunctions%2F" title="Sign in using your Yahoo! account"><img src="Functions%20%28I%29%20-%20C++%20Documentation_files/16yahoo.png" width="16" height="16"></a></td><td colspan="4" class="right"><label for="rememberme">remember me<input class="chk" name="rememberme" id="rememberme" value="1" type="checkbox"> &nbsp; [<a href="http://www.cplusplus.com/user/access.cgi?w=signup">register</a>]</label></td></tr></tbody></table></form><div id="CH_insLogin"></div></div></div>
</div>
<div id="CH_container">
<table id="CH_containertbl"><tbody><tr>
<td id="CH_nav">
<table class="box">
<thead>
<tr><th><a href="http://www.cplusplus.com/">cplusplus.com</a></th></tr>
</thead>
<tbody>
<tr><td class="folder"><a href="http://www.cplusplus.com/info/">Information</a></td></tr>
<tr><td class="folder selected"><a href="http://www.cplusplus.com/doc/">Documentation</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/reference/">Reference</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/articles/">Articles</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/forum/">Forum</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/">Documentation</a></th></tr></thead>
<tbody><tr><td class="selected folder"><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/ascii/">Ascii Codes</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/boolean/">Boolean Operations</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/hex/">Numerical Bases</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></th></tr></thead>
<tbody><tr><td class="folder">Introduction:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/introduction/">Instructions for use</a></td></tr>
<tr><td class="folder">Basics of C++:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/program_structure/">Structure of a program</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/variables/">Variables. Data Types.</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/constants/">Constants</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/operators/">Operators</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/basic_io/">Basic Input/Output</a></td></tr>
<tr><td class="folder">Control Structures:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/control/">Control Structures</a></td></tr>
<tr><td class="selected indent"><a href="http://www.cplusplus.com/doc/tutorial/functions/">Functions (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions2/">Functions (II)</a></td></tr>
<tr><td class="folder">Compound Data Types:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/arrays/">Arrays</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/ntcs/">Character Sequences</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/pointers/">Pointers</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/dynamic/">Dynamic Memory</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/structures/">Data Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/other_data_types/">Other Data Types</a></td></tr>
<tr><td class="folder">Object Oriented Programming:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes/">Classes (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes2/">Classes (II)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/inheritance/">Friendship and inheritance</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/polymorphism/">Polymorphism</a></td></tr>
<tr><td class="folder">Advanced Concepts:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/templates/">Templates</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/namespaces/">Namespaces</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/exceptions/">Exceptions</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/typecasting/">Type Casting</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/preprocessor/">Preprocessor directives</a></td></tr>
<tr><td class="folder">C++ Standard Library:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/files/">Input/Output with files</a></td></tr>
</tbody>
</table>
<div id="CH_subnav"></div>
<br>
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
/* single square */
google_ad_slot = "7465536459";
google_ad_width = 125;
google_ad_height = 125;
//-->
</script>
<script type="text/javascript" src="Functions%20%28I%29%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 125px; position: relative; visibility: visible; width: 125px;"><ins id="aswift_0_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 125px; position: relative; visibility: visible; width: 125px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_0" name="aswift_0" style="left: 0pt; position: absolute; top: 0pt;" width="125" frameborder="0" height="125" scrolling="no"></iframe></ins></ins>
	</td>
	<td id="CH_main">
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Functions%20%28I%29%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_1_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_1" name="aswift_1" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins><br><div class="C_doctop">
<h1>Functions (I)</h1>
<div class="right"></div>
</div>
<div class="docsubtop">
<div class="right"></div>
<div class="prototype"></div>
</div>
Using functions we can structure our programs in a more modular way,
accessing all the potential that structured programming can offer to us
in C++.<br>
<br>
A function is a group of statements that is executed when it is called
from some point of the program. The following is its format:<br>
<br>
<tt>
type name ( parameter1, parameter2, ...) { statements }<br>
</tt>
<br>
where:<br>
<ul>
<li><tt>type</tt> is the data type specifier of the data returned by the function.</li>
<li><tt>name</tt> is the identifier by which it will be possible to call the function.</li>
<li><tt>parameters</tt> (as many as needed): Each parameter consists of
a data type specifier followed by an identifier, like any regular
variable declaration (for example: <tt>int x</tt>) and which acts
within the function as a regular local variable. They allow to pass
arguments to the function when it is called. The different parameters
are separated by commas.</li>
<li><tt>statements</tt> is the function's body. It is a block of statements surrounded by braces <tt>{ }</tt>.</li>
</ul>
<br>
Here you have the first function example: <br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></tt></td>
<td class="source"><pre><code><cite>// function example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> addition (<var>int</var> a, <var>int</var> b)
{
  <var>int</var> r;
  r=a+b;
  <var>return</var> (r);
}

<var>int</var> main ()
{
  <var>int</var> z;
  z = addition (5,3);
  cout &lt;&lt; <kbd>"The result is "</kbd> &lt;&lt; z;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>The result is 8</samp></pre></td></tr></tbody></table></div>
<br>
<br>
In order to examine this code, first of all remember something said at
the beginning of this tutorial: a C++ program always begins its
execution by the <tt>main</tt> function. So we will begin there.<br>
<br>
We can see how the <tt>main</tt> function begins by declaring the variable <tt>z</tt> of type <tt>int</tt>. Right after that, we see a call to a function called <tt>addition</tt>.
Paying attention we will be able to see the similarity between the
structure of the call to the function and the declaration of the
function itself some code lines above: <br>
<br>
<img src="Functions%20%28I%29%20-%20C++%20Documentation_files/function_arguments.gif" alt=""> <br>
<br>
The parameters and arguments have a clear correspondence. Within the <tt>main</tt> function we called to <tt>addition</tt> passing two values: <tt>5</tt> and <tt>3</tt>, that correspond to the <tt>int a</tt> and <tt>int b</tt> parameters declared for function addition.<br>
<br>
At the point at which the function is called from within <tt>main</tt>, the control is lost by <tt>main</tt> and passed to function <tt>addition</tt>. The value of both arguments passed in the call (<tt>5</tt> and <tt>3</tt>) are copied to the local variables <tt>int a</tt> and <tt>int b</tt> within the function.<br>
<br>
Function <tt>addition</tt> declares another local variable (<tt>int r</tt>), and by means of the expression <tt>r=a+b</tt>, it assigns to <tt>r</tt> the result of <tt>a</tt> plus <tt>b</tt>. Because the actual parameters passed for <tt>a</tt> and <tt>b</tt> are <tt>5</tt> and <tt>3</tt> respectively, the result is <tt>8</tt>.<br>
<br>
The following line of code:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code><var>return</var> (r);</code></pre></td></tr></tbody></table></div>
<br>
<br>
finalizes function <tt>addition</tt>, and returns the control back to the function that called it in the first place (in this case, <tt>main</tt>). At this moment the program follows its regular course from the same point at which it was interrupted by the call to <tt>addition</tt>. But additionally, because the <tt>return</tt> statement in function <tt>addition</tt> specified a value: the content of variable <tt>r</tt> (<tt>return (r);</tt>), which at that moment had a value of <tt>8</tt>. This value becomes the value of evaluating the function call.<br>
<br>
<img src="Functions%20%28I%29%20-%20C++%20Documentation_files/function_return_value.gif" alt="">
<br>
So being the value returned by a function the value given to the function call itself when it is evaluated, the variable <tt>z</tt> will be set to the value returned by <tt>addition (5, 3)</tt>, that is <tt>8</tt>. To explain it another way, you can imagine that the call to a function (<tt>addition (5,3)</tt>) is literally replaced by the value it returns (<tt>8</tt>).<br>
<br>
The following line of code in main is:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>cout &lt;&lt; <kbd>"The result is "</kbd> &lt;&lt; z;</code></pre></td></tr></tbody></table></div>
<br>
<br>
That, as you may already expect, produces the printing of the result on the screen.<br>
<br>
<table class="boxed"><tbody><tr><td>
<a name="scope"></a><h4>Scope of variables</h4>
<br>
The scope of variables declared within a function or any other inner
block is only their own function or their own block and cannot be used
outside of them. For example, in the previous example it would have
been impossible to use the variables <tt>a</tt>, <tt>b</tt> or <tt>r</tt> directly in function <tt>main</tt> since they were variables local to function <tt>addition</tt>. Also, it would have been impossible to use the variable <tt>z</tt> directly within function <tt>addition</tt>, since this was a variable local to the function <tt>main</tt>.<br>
<br>
<img src="Functions%20%28I%29%20-%20C++%20Documentation_files/scope_of_variables.gif" alt="">
<br>
Therefore, the scope of local variables is limited to the same block
level in which they are declared. Nevertheless, we also have the
possibility to declare global variables; These are visible from any
point of the code, inside and outside all functions. In order to
declare global variables you simply have to declare the variable
outside any function or block; that means, directly in the body of the
program.<br>
</td></tr></tbody></table>
<br>
And here is another example about functions: <br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></tt></td>
<td class="source"><pre><code><cite>// function example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> subtraction (<var>int</var> a, <var>int</var> b)
{
  <var>int</var> r;
  r=a-b;
  <var>return</var> (r);
}

<var>int</var> main ()
{
  <var>int</var> x=5, y=3, z;
  z = subtraction (7,2);
  cout &lt;&lt; <kbd>"The first result is "</kbd> &lt;&lt; z &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; <kbd>"The second result is "</kbd> &lt;&lt; subtraction (7,2) &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; <kbd>"The third result is "</kbd> &lt;&lt; subtraction (x,y) &lt;&lt; <kbd>'\n'</kbd>;
  z= 4 + subtraction (x,y);
  cout &lt;&lt; <kbd>"The fourth result is "</kbd> &lt;&lt; z &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>The first result is 5
The second result is 5
The third result is 2
The fourth result is 6</samp></pre></td></tr></tbody></table></div>
<br>
<br>
In this case we have created a function called <tt>subtraction</tt>. The only thing that this function does is to subtract both passed parameters and to return the result.<br>
<br>
Nevertheless, if we examine function <tt>main</tt> we will see that we have made several calls to function <tt>subtraction</tt>. We have used some different calling methods so that you see other ways or moments when a function can be called. <br>
<br>
In order to fully understand these examples you must consider once
again that a call to a function could be replaced by the value that the
function call itself is going to return. For example, the first case
(that you should already know because it is the same pattern that we
have used in previous examples):<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>z = subtraction (7,2);
cout &lt;&lt; <kbd>"The first result is "</kbd> &lt;&lt; z;</code></pre></td></tr></tbody></table></div>
<br>
<br>
If we replace the function call by the value it returns (i.e., <tt>5</tt>), we would have:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>z = 5;
cout &lt;&lt; <kbd>"The first result is "</kbd> &lt;&lt; z;</code></pre></td></tr></tbody></table></div>
<br>
<br>
As well as <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>cout &lt;&lt; <kbd>"The second result is "</kbd> &lt;&lt; subtraction (7,2);</code></pre></td></tr></tbody></table></div>
<br>
<br>
has the same result as the previous call, but in this case we made the call to <tt>subtraction</tt> directly as an insertion parameter for <tt>cout</tt>. Simply consider that the result is the same as if we had written:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>cout &lt;&lt; <kbd>"The second result is "</kbd> &lt;&lt; 5;</code></pre></td></tr></tbody></table></div>
<br>
<br>
since <tt>5</tt> is the value returned by <tt>subtraction (7,2)</tt>.<br>
<br>
In the case of:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>cout &lt;&lt; <kbd>"The third result is "</kbd> &lt;&lt; subtraction (x,y);</code></pre></td></tr></tbody></table></div>
<br>
<br>
The only new thing that we introduced is that the parameters of <tt>subtraction</tt> are variables instead of constants. That is perfectly valid. In this case the values passed to function <tt>subtraction</tt> are the values of <tt>x</tt> and <tt>y</tt>, that are <tt>5</tt> and <tt>3</tt> respectively, giving <tt>2</tt> as result. <br>
<br>
The fourth case is more of the same. Simply note that instead of:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>z = 4 + subtraction (x,y);</code></pre></td></tr></tbody></table></div>
<br>
<br>
we could have written:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>z = subtraction (x,y) + 4;</code></pre></td></tr></tbody></table></div>
<br>
<br>
with exactly the same result. I have switched places so you can see that the semicolon sign (<tt>;</tt>)
goes at the end of the whole statement. It does not necessarily have to
go right after the function call. The explanation might be once again
that you imagine that a function can be replaced by its returned value:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>z = 4 + 2;
z = 2 + 4;</code></pre></td></tr></tbody></table></div>
<br>
<br>
<a name="void"></a><h3>Functions with no type. The use of void.</h3>
<br>
If you remember the syntax of a function declaration:<br>
<br>
<tt>
type name ( argument1, argument2 ...) statement<br>
</tt>
<br>
you will see that the declaration begins with a <tt>type</tt>,
that is the type of the function itself (i.e., the type of the datum
that will be returned by the function with the return statement). But
what if we want to return no value?<br>
<br>
Imagine that we want to make a function just to show a message on the
screen. We do not need it to return any value. In this case we should
use the <tt>void</tt> type specifier for the function. This is a special specifier that indicates absence of type.<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></tt></td>
<td class="source"><pre><code><cite>// void function example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>void</var> printmessage ()
{
  cout &lt;&lt; <kbd>"I'm a function!"</kbd>;
}

<var>int</var> main ()
{
  printmessage ();
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>I'm a function!</samp></pre></td></tr></tbody></table></div>
<br>
<br>
<tt>void</tt> can also be used in the function's parameter list to
explicitly specify that we want the function to take no actual
parameters when it is called. For example, function <tt>printmessage</tt> could have been declared as:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br></tt></td>
<td class="source"><pre><code><var>void</var> printmessage (<var>void</var>)
{
  cout &lt;&lt; <kbd>"I'm a function!"</kbd>;
}</code></pre></td></tr></tbody></table></div>
<br>
<br>
Although it is optional to specify <tt>void</tt> in the parameter list. In C++, a parameter list can simply be left blank if we want a function with no parameters.<br>
 <br>
What you must always remember is that the format for calling a function
includes specifying its name and enclosing its parameters between
parentheses. The non-existence of parameters does not exempt us from
the obligation to write the parentheses. For that reason the call to <tt>printmessage</tt> is:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>printmessage ();</code></pre></td></tr></tbody></table></div>
<br>
<br>
The parentheses clearly indicate that this is a call to a function and
not the name of a variable or some other C++ statement. The following
call would have been incorrect:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>printmessage;</code></pre></td></tr></tbody></table></div>
<table class="C_docPrevNext"><tbody><tr><td class="prev"><a href="http://www.cplusplus.com/doc/tutorial/control/" rel="prev"><img src="Functions%20%28I%29%20-%20C++%20Documentation_files/navigate_previous.gif" alt="Previous">Previous:<br><b>Control Structures</b></a></td><td class="index"><a href="http://www.cplusplus.com/doc/tutorial/" rel="index"><img src="Functions%20%28I%29%20-%20C++%20Documentation_files/navigate_index.gif" alt="Index">Index</a></td><td class="next"><a href="http://www.cplusplus.com/doc/tutorial/functions2/" rel="next"><img src="Functions%20%28I%29%20-%20C++%20Documentation_files/navigate_next.gif" alt="Next">Next:<br><b>Functions (II)</b></a></td></tr></tbody></table><div id="CH_bb"></div><script type="text/javascript">new doc_Page('CH_bb','/doc/item.cgi',7,0,0,32768);</script>
<p>

<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Functions%20%28I%29%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_2_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_2" name="aswift_2" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins>
</p></td></tr></tbody></table>
</div>
<div id="CH_footer">
	<a href="http://www.cplusplus.com/">Home page</a> | <a href="http://www.cplusplus.com/privacy.do">Privacy policy</a><br>© cplusplus.com, 2000-2011 - All rights reserved - <i>v2.9</i><br><a href="http://www.cplusplus.com/contact.do?referrer=http%3A%2F%2Fwww.cplusplus.com%2Fdoc%2Ftutorial%2Ffunctions%2F">Spotted an error? contact us</a>
</div>

<script src="Functions%20%28I%29%20-%20C++%20Documentation_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
onPrint.print();
var gso = new Session ('ssn29','rel29',14400,86400,1313155896);
_uacct = "UA-521783-1";
urchinTracker();
</script>
</body></html>