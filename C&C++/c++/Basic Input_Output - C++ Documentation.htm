<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>


<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Basic Input/Output - C++ Documentation</title>
<style type="text/css">.hierarchy DIV {width:100px; height:24px; text-align:center; padding-top:8px; border:black 1px solid} </style>
<link rel="shortcut icon" type="image/x-icon" href="http://www.cplusplus.com/favicon.ico">
<link rel="stylesheet" type="text/css" href="Basic%20Input_Output%20-%20C++%20Documentation_files/main29f.css">
<script src="Basic%20Input_Output%20-%20C++%20Documentation_files/main29f.js" type="text/javascript"></script>
<script type="text/javascript">
new LoginBox('CH_boxLogin',1);</script>
</head><body>
<div id="CH_header">
	<a href="http://www.cplusplus.com/"><img src="Basic%20Input_Output%20-%20C++%20Documentation_files/cpp-logo.png" alt="cplusplus.com" width="198" height="75"></a>
	<div id="CH_bar">
		<b><a href="http://www.cplusplus.com/">C++</a> : <a href="http://www.cplusplus.com/doc/">Documentation</a> : <a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a> : Basic Input/Output</b>
	</div>
	
	<div id="CH_searchbox">
		<form id="search" action="/search.do" method="get">
		Search: <input name="q" size="13" class="txt"> <input value="Search" class="btn" type="submit">
		</form>
	</div>
	<div id="CH_boxLogin"><div class="loginmessage">&nbsp;<img src="Basic%20Input_Output%20-%20C++%20Documentation_files/waitblue.gif"></div>
	</div>
</div>
<div id="CH_container">
<table id="CH_containertbl"><tbody><tr>
<td id="CH_nav">
<table class="box">
<thead>
<tr><th><a href="http://www.cplusplus.com/">cplusplus.com</a></th></tr>
</thead>
<tbody>
<tr><td class="folder"><a href="http://www.cplusplus.com/info/">Information</a></td></tr>
<tr><td class="folder selected"><a href="http://www.cplusplus.com/doc/">Documentation</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/reference/">Reference</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/articles/">Articles</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/forum/">Forum</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/">Documentation</a></th></tr></thead>
<tbody><tr><td class="selected folder"><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/ascii/">Ascii Codes</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/boolean/">Boolean Operations</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/hex/">Numerical Bases</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></th></tr></thead>
<tbody><tr><td class="folder">Introduction:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/introduction/">Instructions for use</a></td></tr>
<tr><td class="folder">Basics of C++:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/program_structure/">Structure of a program</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/variables/">Variables. Data Types.</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/constants/">Constants</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/operators/">Operators</a></td></tr>
<tr><td class="selected indent"><a href="http://www.cplusplus.com/doc/tutorial/basic_io/">Basic Input/Output</a></td></tr>
<tr><td class="folder">Control Structures:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/control/">Control Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions/">Functions (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions2/">Functions (II)</a></td></tr>
<tr><td class="folder">Compound Data Types:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/arrays/">Arrays</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/ntcs/">Character Sequences</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/pointers/">Pointers</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/dynamic/">Dynamic Memory</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/structures/">Data Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/other_data_types/">Other Data Types</a></td></tr>
<tr><td class="folder">Object Oriented Programming:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes/">Classes (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes2/">Classes (II)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/inheritance/">Friendship and inheritance</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/polymorphism/">Polymorphism</a></td></tr>
<tr><td class="folder">Advanced Concepts:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/templates/">Templates</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/namespaces/">Namespaces</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/exceptions/">Exceptions</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/typecasting/">Type Casting</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/preprocessor/">Preprocessor directives</a></td></tr>
<tr><td class="folder">C++ Standard Library:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/files/">Input/Output with files</a></td></tr>
</tbody>
</table>
<div id="CH_subnav"></div>
<br>
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
/* single square */
google_ad_slot = "7465536459";
google_ad_width = 125;
google_ad_height = 125;
//-->
</script>
<script type="text/javascript" src="Basic%20Input_Output%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 125px; position: relative; visibility: visible; width: 125px;"><ins id="aswift_0_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 125px; position: relative; visibility: visible; width: 125px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_0" name="aswift_0" style="left: 0pt; position: absolute; top: 0pt;" width="125" frameborder="0" height="125" scrolling="no"></iframe></ins></ins>
	</td>
	<td id="CH_main">
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Basic%20Input_Output%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_1_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_1" name="aswift_1" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins><br><div class="C_doctop">
<h1>Basic Input/Output</h1>
<div class="right"></div>
</div>
<div class="docsubtop">
<div class="right"></div>
<div class="prototype"></div>
</div>
Until now, the example programs of previous sections provided very
little interaction with the user, if any at all. Using the standard
input and output library, we will be able to interact with the user by
printing messages on the screen and getting the user's input from the
keyboard.<br>
<br>
C++ uses a convenient abstraction called <i>streams</i> to
perform input and output operations in sequential media such as the
screen or the keyboard. A stream is an object where a program can
either insert or extract characters to/from it. We do not really need
to care about many specifications about the physical media associated
with the stream - we only need to know it will accept or provide
characters sequentially.<br>
<br>
The standard C++ library includes the header file <tt>iostream</tt>, where the standard input and output stream objects are declared.<br>
<br>
<a name="cout"></a><h3>Standard Output (cout)</h3>
By default, the standard output of a program is the screen, and the C++ stream object defined to access it is <tt>cout</tt>.<br>
<br>
<tt>cout</tt> is used in conjunction with the <i>insertion operator</i>, which is written as <tt>&lt;&lt;</tt> (two "less than" signs).<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br></tt></td>
<td class="source"><pre><code>cout &lt;&lt; <kbd>"Output sentence"</kbd>; <cite>// prints Output sentence on screen</cite>
cout &lt;&lt; 120;               <cite>// prints number 120 on screen</cite>
cout &lt;&lt; x;                 <cite>// prints the content of x on screen </cite></code></pre></td></tr></tbody></table></div>
<br>
<br>
The <tt>&lt;&lt;</tt> operator inserts the data that follows it into the stream preceding it. In the examples above it inserted the constant string <tt>Output sentence</tt>, the numerical constant <tt>120</tt> and variable <tt>x</tt> into the standard output stream <tt>cout</tt>. Notice that the sentence in the first instruction is enclosed between double quotes (<tt>"</tt>)
because it is a constant string of characters. Whenever we want to use
constant strings of characters we must enclose them between double
quotes (<tt>"</tt>) so that they can be clearly distinguished from variable names. For example, these two sentences have very different results:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>cout &lt;&lt; <kbd>"Hello"</kbd>;  <cite>// prints Hello</cite>
cout &lt;&lt; Hello;    <cite>// prints the content of Hello variable </cite></code></pre></td></tr></tbody></table></div>
<br>
<br>
The insertion operator (<tt>&lt;&lt;</tt>) may be used more than once in a single statement:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>cout &lt;&lt; <kbd>"Hello, "</kbd> &lt;&lt; <kbd>"I am "</kbd> &lt;&lt; <kbd>"a C++ statement"</kbd>;</code></pre></td></tr></tbody></table></div>
<br>
<br>
This last statement would print the message <tt>Hello, I am a C++ statement</tt> on the screen. The utility of repeating the insertion operator (<tt>&lt;&lt;</tt>) is demonstrated when we want to print out a combination of variables and constants or more than one variable:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>cout &lt;&lt; <kbd>"Hello, I am "</kbd> &lt;&lt; age &lt;&lt; <kbd>" years old and my zipcode is "</kbd> &lt;&lt; zipcode;</code></pre></td></tr></tbody></table></div>
<br>
<br>
If we assume the <tt>age</tt> variable to contain the value <tt>24</tt> and the <tt>zipcode</tt> variable to contain <tt>90064</tt> the output of the previous statement would be: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>Hello, I am 24 years old and my zipcode is 90064 </code></pre></td></tr></tbody></table></div>
<br>
<br>
It is important to notice that <tt>cout</tt> does not add a line break after its output unless we explicitly indicate it, therefore, the following statements:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>cout &lt;&lt; <kbd>"This is a sentence."</kbd>;
cout &lt;&lt; <kbd>"This is another sentence."</kbd>; </code></pre></td></tr></tbody></table></div>
<br>
<br>
will be shown on the screen one following the other without any line break between them:<br>
<br>
<tt>
This is a sentence.This is another sentence. <br>
</tt>
<br>
even though we had written them in two different insertions into <tt>cout</tt>. In order to perform a line break on the output we must explicitly insert a new-line character into <tt>cout</tt>. In C++ a new-line character can be specified as <tt>\n</tt> (backslash, n):<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>cout &lt;&lt; <kbd>"First sentence.\n"</kbd>;
cout &lt;&lt; <kbd>"Second sentence.\nThird sentence."</kbd>; </code></pre></td></tr></tbody></table></div>
<br>
<br>
This produces the following output: <br>
<br>
<tt>
First sentence.<br>
Second sentence.<br>
Third sentence.<br>
</tt>
<br>
Additionally, to add a new-line, you may also use the <tt>endl</tt> manipulator. For example: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>cout &lt;&lt; <kbd>"First sentence."</kbd> &lt;&lt; endl;
cout &lt;&lt; <kbd>"Second sentence."</kbd> &lt;&lt; endl; </code></pre></td></tr></tbody></table></div>
<br>
<br>
would print out: <br>
<br>
<tt>
First sentence.<br>
Second sentence. <br>
</tt>
<br>
The <tt>endl</tt> manipulator produces a newline character, exactly as the insertion of <tt>'\n'</tt> does, but it also has an additional behavior when it is used with buffered streams: the buffer is flushed. Anyway, <tt>cout</tt> will be an unbuffered stream in most cases, so you can generally use both the <tt>\n</tt> escape character and the <tt>endl</tt> manipulator in order to specify a new line without any difference in its behavior.<br>
<br>
<a name="cin"></a><h3>Standard Input (cin).</h3>
The standard input device is usually the keyboard. Handling the
standard input in C++ is done by applying the overloaded operator of
extraction (<tt>&gt;&gt;</tt>) on the <tt>cin</tt>
stream. The operator must be followed by the variable that will store
the data that is going to be extracted from the stream. For example:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><var>int</var> age;
cin &gt;&gt; age; </code></pre></td></tr></tbody></table></div>
<br>
<br>
The first statement declares a variable of type <tt>int</tt> called <tt>age</tt>, and the second one waits for an input from <tt>cin</tt> (the keyboard) in order to store it in this integer variable.<br>
<br>
<tt>cin</tt> can only process the input from the keyboard once the <tt>RETURN</tt> key has been pressed. Therefore, even if you request a single character, the extraction from <tt>cin</tt> will not process the input until the user presses <tt>RETURN</tt> after the character has been introduced.<br>
<br>
You must always consider the type of the variable that you are using as a container with <tt>cin</tt>
extractions. If you request an integer you will get an integer, if you
request a character you will get a character and if you request a
string of characters you will get a string of characters. <br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></tt></td>
<td class="source"><pre><code><cite>// i/o example</cite>

<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> i;
  cout &lt;&lt; <kbd>"Please enter an integer value: "</kbd>;
  cin &gt;&gt; i;
  cout &lt;&lt; <kbd>"The value you entered is "</kbd> &lt;&lt; i;
  cout &lt;&lt; <kbd>" and its double is "</kbd> &lt;&lt; i*2 &lt;&lt; <kbd>".\n"</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>Please enter an integer value: 702
The value you entered is 702 and its double is 1404.</samp></pre></td></tr></tbody></table></div>
<br>
<br>
The user of a program may be one of the factors that generate errors even in the simplest programs that use <tt>cin</tt>
(like the one we have just seen). Since if you request an integer value
and the user introduces a name (which generally is a string of
characters), the result may cause your program to misoperate since it
is not what we were expecting from the user. So when you use the data
input provided by <tt>cin</tt> extractions you will have to trust that
the user of your program will be cooperative and that he/she will not
introduce his/her name or something similar when an integer value is
requested. A little ahead, when we see the <tt>stringstream</tt> class we will see a possible solution for the errors that can be caused by this type of user input.<br>
<br>
You can also use cin to request more than one datum input from the user: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>cin &gt;&gt; a &gt;&gt; b;</code></pre></td></tr></tbody></table></div>
<br>
<br>
is</td></tr></tbody></table></div></body></html>