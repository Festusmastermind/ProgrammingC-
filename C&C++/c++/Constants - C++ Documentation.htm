<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>


<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Constants - C++ Documentation</title>
<style type="text/css">.hierarchy DIV {width:100px; height:24px; text-align:center; padding-top:8px; border:black 1px solid} </style>
<link rel="shortcut icon" type="image/x-icon" href="http://www.cplusplus.com/favicon.ico">
<link rel="stylesheet" type="text/css" href="Constants%20-%20C++%20Documentation_files/main29f.css">
<script src="Constants%20-%20C++%20Documentation_files/main29f.js" type="text/javascript"></script>
<script type="text/javascript">
new LoginBox('CH_boxLogin',1);</script>
</head><body>
<div id="CH_header">
	<a href="http://www.cplusplus.com/"><img src="Constants%20-%20C++%20Documentation_files/cpp-logo.png" alt="cplusplus.com" width="198" height="75"></a>
	<div id="CH_bar">
		<b><a href="http://www.cplusplus.com/">C++</a> : <a href="http://www.cplusplus.com/doc/">Documentation</a> : <a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a> : Constants</b>
	</div>
	
	<div id="CH_searchbox">
		<form id="search" action="/search.do" method="get">
		Search: <input name="q" size="13" class="txt"> <input value="Search" class="btn" type="submit">
		</form>
	</div>
	<div id="CH_boxLogin"><div class="C_LoginBox"><form style="display: block;" name="CH_frmLogin" id="CH_frmLogin" action="/user/access.cgi" onsubmit="elCH_boxLogin.send(); return false;" method="post"><table><tbody><tr><td></td><td class="right"><b>login:</b></td><td><input name="w" value="login" type="hidden"><input name="y" value="1" type="hidden"><input name="to" value="http://www.cplusplus.com/doc/tutorial/constants/" type="hidden"><input class="txt" name="l" size="4" title="Type user name" type="text"></td><td><input class="txt" name="p" size="4" title="Type password" type="password"></td><td><input class="btn" value="sign in" type="submit"></td></tr><tr><td>sign in using:<a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=google&amp;to=%2Fdoc%2Ftutorial%2Fconstants%2F" title="Sign in using your google account"><img src="Constants%20-%20C++%20Documentation_files/16google.png" width="16" height="16"></a><a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=yahoo&amp;to=%2Fdoc%2Ftutorial%2Fconstants%2F" title="Sign in using your Yahoo! account"><img src="Constants%20-%20C++%20Documentation_files/16yahoo.png" width="16" height="16"></a></td><td colspan="4" class="right"><label for="rememberme">remember me<input class="chk" name="rememberme" id="rememberme" value="1" type="checkbox"> &nbsp; [<a href="http://www.cplusplus.com/user/access.cgi?w=signup">register</a>]</label></td></tr></tbody></table></form><div id="CH_insLogin"></div></div></div>
</div>
<div id="CH_container">
<table id="CH_containertbl"><tbody><tr>
<td id="CH_nav">
<table class="box">
<thead>
<tr><th><a href="http://www.cplusplus.com/">cplusplus.com</a></th></tr>
</thead>
<tbody>
<tr><td class="folder"><a href="http://www.cplusplus.com/info/">Information</a></td></tr>
<tr><td class="folder selected"><a href="http://www.cplusplus.com/doc/">Documentation</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/reference/">Reference</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/articles/">Articles</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/forum/">Forum</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/">Documentation</a></th></tr></thead>
<tbody><tr><td class="selected folder"><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/ascii/">Ascii Codes</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/boolean/">Boolean Operations</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/hex/">Numerical Bases</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></th></tr></thead>
<tbody><tr><td class="folder">Introduction:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/introduction/">Instructions for use</a></td></tr>
<tr><td class="folder">Basics of C++:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/program_structure/">Structure of a program</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/variables/">Variables. Data Types.</a></td></tr>
<tr><td class="selected indent"><a href="http://www.cplusplus.com/doc/tutorial/constants/">Constants</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/operators/">Operators</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/basic_io/">Basic Input/Output</a></td></tr>
<tr><td class="folder">Control Structures:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/control/">Control Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions/">Functions (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions2/">Functions (II)</a></td></tr>
<tr><td class="folder">Compound Data Types:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/arrays/">Arrays</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/ntcs/">Character Sequences</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/pointers/">Pointers</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/dynamic/">Dynamic Memory</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/structures/">Data Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/other_data_types/">Other Data Types</a></td></tr>
<tr><td class="folder">Object Oriented Programming:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes/">Classes (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes2/">Classes (II)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/inheritance/">Friendship and inheritance</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/polymorphism/">Polymorphism</a></td></tr>
<tr><td class="folder">Advanced Concepts:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/templates/">Templates</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/namespaces/">Namespaces</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/exceptions/">Exceptions</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/typecasting/">Type Casting</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/preprocessor/">Preprocessor directives</a></td></tr>
<tr><td class="folder">C++ Standard Library:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/files/">Input/Output with files</a></td></tr>
</tbody>
</table>
<div id="CH_subnav"></div>
<br>
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
/* single square */
google_ad_slot = "7465536459";
google_ad_width = 125;
google_ad_height = 125;
//-->
</script>
<script type="text/javascript" src="Constants%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 125px; position: relative; visibility: visible; width: 125px;"><ins id="aswift_0_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 125px; position: relative; visibility: visible; width: 125px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_0" name="aswift_0" style="left: 0pt; position: absolute; top: 0pt;" width="125" frameborder="0" height="125" scrolling="no"></iframe></ins></ins>
	</td>
	<td id="CH_main">
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Constants%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_1_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_1" name="aswift_1" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins><br><div class="C_doctop">
<h1>Constants</h1>
<div class="right"></div>
</div>
<div class="docsubtop">
<div class="right"></div>
<div class="prototype"></div>
</div>
<dfn>Constants</dfn> are expressions with a fixed value.<br>
<br>
<h3>Literals</h3>
<dfn>Literals</dfn> are the most obvious kind of constants. They are
used to express particular values within the source code of a program.
We have already used these previously to give concrete values to
variables or to express messages we wanted our programs to print out,
for example, when we wrote:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>a = 5;</code></pre></td></tr></tbody></table></div>
<br>
<br>
the <code>5</code> in this piece of code was a <em>literal constant</em>.<br>
<br>
Literal constants can be divided in <em>Integer Numerals</em>, <em>Floating-Point Numerals</em>, <em>Characters</em>, <em>Strings</em> and <em>Boolean Values</em>.<br>
<br>
<h4>Integer Numerals</h4>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br></tt></td>
<td class="source"><pre><code>1776
707
-273</code></pre></td></tr></tbody></table></div>
<br>
<br>
They are numerical constants that identify integer decimal values.
Notice that to express a numerical constant we do not have to write
quotes (<code>"</code>) nor any special character. There is no doubt that it is a constant: whenever we write <code>1776</code> in a program, we will be referring to the value 1776.<br>
<br>
In addition to decimal numbers (those that all of us are used to using every day), C++ allows the use of octal numbers (<em>base 8</em>) and hexadecimal numbers (<em>base 16</em>) as literal constants. If we want to express an octal number we have to precede it with a <code>0</code> (a <em>zero</em> character). And in order to express a hexadecimal number we have to precede it with the characters <code>0x</code> (<em>zero</em>, <em>x</em>). For example, the following literal constants are all equivalent to each other: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br></tt></td>
<td class="source"><pre><code>75         <cite>// decimal</cite>
0113       <cite>// octal</cite>
0x4b       <cite>// hexadecimal </cite></code></pre></td></tr></tbody></table></div>
<br>
<br>
All of these represent the same number: 75 (seventy-five) expressed as
a base-10 numeral, octal numeral and hexadecimal numeral, respectively.
<br>
<br>
Literal constants, like variables, are considered to have a specific data type. By default, integer literals are of type <var>int</var>. However, we can force them to either be unsigned by appending the <var>u</var> character to it, or long by appending <var>l</var>:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br></tt></td>
<td class="source"><pre><code>75         <cite>// int</cite>
75u        <cite>// unsigned int</cite>
75l        <cite>// long</cite>
75ul       <cite>// unsigned long </cite></code></pre></td></tr></tbody></table></div>
<br>
<br>
In both cases, the suffix can be specified using either upper or lowercase letters.<br>
<br>
<h4>Floating Point Numbers</h4>
They express numbers with decimals and/or exponents. They can include either a decimal point, an <code>e</code> character (that expresses "by ten at the Xth height", where X is an integer value that follows the <code>e</code> character), or both a decimal point and an <code>e</code> character:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br></tt></td>
<td class="source"><pre><code>3.14159    <cite>// 3.14159</cite>
6.02e23    <cite>// 6.02 x 10^23</cite>
1.6e-19    <cite>// 1.6 x 10^-19</cite>
3.0        <cite>// 3.0 </cite></code></pre></td></tr></tbody></table></div>
<br>
<br>
These are four valid numbers with decimals expressed in C++. The first
number is PI, the second one is the number of Avogadro, the third is
the electric charge of an electron (an extremely small number) -all of
them approximated- and the last one is the number three expressed as a
floating-point numeric literal.<br>
<br>
The default type for floating point literals is <var>double</var>. If you explicitly want to express a <var>float</var> or a <var>long double</var> numerical literal, you can use the <code>f</code> or <code>l</code> suffixes respectively:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>3.14159L   <cite>// long double</cite>
6.02e23f   <cite>// float </cite></code></pre></td></tr></tbody></table></div>
<br>
<br>
Any of the letters that can be part of a floating-point numerical constant (<code>e</code>, <code>f</code>, <code>l</code>) can be written using either lower or uppercase letters without any difference in their meanings.<br>
<br>
<h4>Character and string literals</h4>
There also exist non-numerical constants, like: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br></tt></td>
<td class="source"><pre><code><kbd>'z'</kbd>
<kbd>'p'</kbd>
<kbd>"Hello world"</kbd>
<kbd>"How do you do?"</kbd> </code></pre></td></tr></tbody></table></div>
<br>
<br>
The first two expressions represent single character constants, and the
following two represent string literals composed of several characters.
Notice that to represent a single character we enclose it between
single quotes (<code>'</code>) and to express a string (which generally consists of more than one character) we enclose it between double quotes (<code>"</code>). <br>
<br>
When writing both single character and string literals, it is necessary
to put the quotation marks surrounding them to distinguish them from
possible variable identifiers or reserved keywords. Notice the
difference between these two expressions: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>x
<kbd>'x'</kbd></code></pre></td></tr></tbody></table></div>
<br>
<br>
<code>x</code> alone would refer to a variable whose identifier is <code>x</code>, whereas <code>'x'</code> (enclosed within single quotation marks) would refer to the character constant <var>'x'</var>.<br>
<br>
Character and string literals have certain peculiarities, like the
escape codes. These are special characters that are difficult or
impossible to express otherwise in the source code of a program, like
newline (<code>\n</code>) or tab (<code>\t</code>). All of them are preceded by a backslash (<code>\</code>). Here you have a list of some of such escape codes: <br>
<br>
<table class="boxed">
<tbody><tr><td><code>\n</code></td><td>newline</td></tr>
<tr><td><code>\r</code></td><td>carriage return</td></tr>
<tr><td><code>\t</code></td><td>tab</td></tr>
<tr><td><code>\v</code></td><td>vertical tab</td></tr>
<tr><td><code>\b</code></td><td>backspace</td></tr>
<tr><td><code>\f</code></td><td>form feed (page feed)</td></tr>
<tr><td><code>\a</code></td><td>alert (beep)</td></tr>
<tr><td><code>\'</code></td><td>single quote (<samp>'</samp>)</td></tr>
<tr><td><code>\"</code></td><td>double quote (<samp>"</samp>)</td></tr>
<tr><td><code>\?</code></td><td>question mark (<samp>?</samp>)</td></tr>
<tr><td><code>\\</code></td><td>backslash (<samp>\</samp>)</td></tr>
</tbody></table>
<br>
For example: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br></tt></td>
<td class="source"><pre><code><kbd>'\n'</kbd>
<kbd>'\t'</kbd>
<kbd>"Left \t Right"</kbd>
<kbd>"one\ntwo\nthree"</kbd> </code></pre></td></tr></tbody></table></div>
<br>
<br>
Additionally, you can express any character by its numerical ASCII code by writing a backslash character (<code>\</code>) followed by the ASCII code expressed as an octal (<em>base-8</em>) or hexadecimal (<em>base-16</em>) number. In the first case (octal) the digits must immediately follow the backslash (for example <code>\23</code> or <code>\40</code>), in the second case (hexadecimal), an <code>x</code> character must be written before the digits themselves (for example <code>\x20</code> or <code>\x4A</code>).<br>
<br>
String literals can extend to more than a single line of code by putting a backslash sign (<code>\</code>) at the end of each unfinished line.<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><kbd>"string expressed in \
two lines"</kbd> </code></pre></td></tr></tbody></table></div>
<br>
<br>
You can also concatenate several string constants separating them by
one or several blank spaces, tabulators, newline or any other valid
blank character: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code><kbd>"this forms"</kbd> <kbd>"a single"</kbd> <kbd>"string"</kbd> <kbd>"of characters"</kbd></code></pre></td></tr></tbody></table></div>
<br>
<br>
Finally, if we want the string literal to be explicitly made of wide characters (<var>wchar_t</var> type), instead of narrow characters (<var>char</var> type), we can precede the constant with the <code>L</code> prefix:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>L<kbd>"This is a wide character string"</kbd></code></pre></td></tr></tbody></table></div>
<br>
<br>
Wide characters are used mainly to represent non-English or exotic character sets.<br>
<br>
<h4>Boolean literals</h4>
There are only two valid Boolean values: <var>true</var> and <var>false</var>. These can be expressed in C++ as values of type <var>bool</var> by using the Boolean literals <code>true</code> and <code>false</code>.<br>
<br>
<h3>Defined constants (#define)</h3>
You can define your own names for constants that you use very often
without having to resort to memory-consuming variables, simply by using
the <code>#define</code> preprocessor directive. Its format is:<br>
<br>
<code>#define identifier value</code>
<br>
For example: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><dfn>#define PI 3.14159</dfn>
<dfn>#define NEWLINE '\n' </dfn></code></pre></td></tr></tbody></table></div>
<br>
<br>
This defines two new constants: <var>PI</var> and <var>NEWLINE</var>. Once they are defined, you can use them in the rest of the code as if they were any other regular constant, for example: <br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></tt></td>
<td class="source"><pre><code><cite>// defined constants: calculate circumference</cite>

<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<dfn>#define PI 3.14159</dfn>
<dfn>#define NEWLINE '\n'</dfn>

<var>int</var> main ()
{
  <var>double</var> r=5.0;               <cite>// radius</cite>
  <var>double</var> circle;

  circle = 2 * PI * r;
  cout &lt;&lt; circle;
  cout &lt;&lt; NEWLINE;

  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>31.4159</samp></pre></td></tr></tbody></table></div>
<br>
<br>
In fact the only thing that the compiler preprocessor does when it encounters <code>#define</code> directives is to literally replace any occurrence of their identifier (in the previous example, these were <var>PI</var> and <var>NEWLINE</var>) by the code to which they have been defined (<code>3.14159</code> and <code>'\n'</code> respectively).<br>
<br>
The <code>#define</code> directive is not a C++ statement but a
directive for the preprocessor; therefore it assumes the entire line as
the directive and does not require a semicolon (<code>;</code>) at its end. If you append a semicolon character (<code>;</code>)
at the end, it will also be appended in all occurrences of the
identifier within the body of the program that the preprocessor
replaces.<br>
<br>
<h3>Declared constants (const)</h3>
With the <code>const</code> prefix you can declare constants with a specific type in the same way as you would do with a variable: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><var>const</var> <var>int</var> pathwidth = 100;
<var>const</var> <var>char</var> tabulator = <kbd>'\t'</kbd>;</code></pre></td></tr></tbody></table></div>
<br>
<br>
Here, <code>pathwidth</code> and <code>tabulator</code> are two
typed constants. They are treated just like regular variables except
that their values cannot be modified after their definition.<br>
<table class="C_docPrevNext"><tbody><tr><td class="prev"><a href="http://www.cplusplus.com/doc/tutorial/variables/" rel="prev"><img src="Constants%20-%20C++%20Documentation_files/navigate_previous.gif" alt="Previous">Previous:<br><b>Variables. Data Types.</b></a></td><td class="index"><a href="http://www.cplusplus.com/doc/tutorial/" rel="index"><img src="Constants%20-%20C++%20Documentation_files/navigate_index.gif" alt="Index">Index</a></td><td class="next"><a href="http://www.cplusplus.com/doc/tutorial/operators/" rel="next"><img src="Constants%20-%20C++%20Documentation_files/navigate_next.gif" alt="Next">Next:<br><b>Operators</b></a></td></tr></tbody></table><div id="CH_bb"></div><script type="text/javascript">new doc_Page('CH_bb','/doc/item.cgi',3,0,0,32768);</script>
<p>

<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Constants%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_2_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_2" name="aswift_2" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins>
</p></td></tr></tbody></table>
</div>
<div id="CH_footer">
	<a href="http://www.cplusplus.com/">Home page</a> | <a href="http://www.cplusplus.com/privacy.do">Privacy policy</a><br>© cplusplus.com, 2000-2011 - All rights reserved - <i>v2.9</i><br><a href="http://www.cplusplus.com/contact.do?referrer=http%3A%2F%2Fwww.cplusplus.com%2Fdoc%2Ftutorial%2Fconstants%2F">Spotted an error? contact us</a>
</div>

<script src="Constants%20-%20C++%20Documentation_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
onPrint.print();
var gso = new Session ('ssn29','rel29',14400,86400,1313153517);
_uacct = "UA-521783-1";
urchinTracker();
</script>
</body></html>