<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>


<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Character Sequences - C++ Documentation</title>
<style type="text/css">.hierarchy DIV {width:100px; height:24px; text-align:center; padding-top:8px; border:black 1px solid} </style>
<link rel="shortcut icon" type="image/x-icon" href="http://www.cplusplus.com/favicon.ico">
<link rel="stylesheet" type="text/css" href="Character%20Sequences%20-%20C++%20Documentation_files/main29f.css">
<script src="Character%20Sequences%20-%20C++%20Documentation_files/main29f.js" type="text/javascript"></script>
<script type="text/javascript">
new LoginBox('CH_boxLogin',1);</script>
</head><body>
<div id="CH_header">
	<a href="http://www.cplusplus.com/"><img src="Character%20Sequences%20-%20C++%20Documentation_files/cpp-logo.png" alt="cplusplus.com" width="198" height="75"></a>
	<div id="CH_bar">
		<b><a href="http://www.cplusplus.com/">C++</a> : <a href="http://www.cplusplus.com/doc/">Documentation</a> : <a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a> : Character Sequences</b>
	</div>
	
	<div id="CH_searchbox">
		<form id="search" action="/search.do" method="get">
		Search: <input name="q" size="13" class="txt"> <input value="Search" class="btn" type="submit">
		</form>
	</div>
	<div id="CH_boxLogin"><div class="loginmessage">&nbsp;<img src="Character%20Sequences%20-%20C++%20Documentation_files/waitblue.gif"></div>
	</div>
</div>
<div id="CH_container">
<table id="CH_containertbl"><tbody><tr>
<td id="CH_nav">
<table class="box">
<thead>
<tr><th><a href="http://www.cplusplus.com/">cplusplus.com</a></th></tr>
</thead>
<tbody>
<tr><td class="folder"><a href="http://www.cplusplus.com/info/">Information</a></td></tr>
<tr><td class="folder selected"><a href="http://www.cplusplus.com/doc/">Documentation</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/reference/">Reference</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/articles/">Articles</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/forum/">Forum</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/">Documentation</a></th></tr></thead>
<tbody><tr><td class="selected folder"><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/ascii/">Ascii Codes</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/boolean/">Boolean Operations</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/hex/">Numerical Bases</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></th></tr></thead>
<tbody><tr><td class="folder">Introduction:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/introduction/">Instructions for use</a></td></tr>
<tr><td class="folder">Basics of C++:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/program_structure/">Structure of a program</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/variables/">Variables. Data Types.</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/constants/">Constants</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/operators/">Operators</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/basic_io/">Basic Input/Output</a></td></tr>
<tr><td class="folder">Control Structures:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/control/">Control Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions/">Functions (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions2/">Functions (II)</a></td></tr>
<tr><td class="folder">Compound Data Types:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/arrays/">Arrays</a></td></tr>
<tr><td class="selected indent"><a href="http://www.cplusplus.com/doc/tutorial/ntcs/">Character Sequences</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/pointers/">Pointers</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/dynamic/">Dynamic Memory</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/structures/">Data Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/other_data_types/">Other Data Types</a></td></tr>
<tr><td class="folder">Object Oriented Programming:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes/">Classes (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes2/">Classes (II)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/inheritance/">Friendship and inheritance</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/polymorphism/">Polymorphism</a></td></tr>
<tr><td class="folder">Advanced Concepts:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/templates/">Templates</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/namespaces/">Namespaces</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/exceptions/">Exceptions</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/typecasting/">Type Casting</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/preprocessor/">Preprocessor directives</a></td></tr>
<tr><td class="folder">C++ Standard Library:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/files/">Input/Output with files</a></td></tr>
</tbody>
</table>
<div id="CH_subnav"></div>
<br>
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
/* single square */
google_ad_slot = "7465536459";
google_ad_width = 125;
google_ad_height = 125;
//-->
</script>
<script type="text/javascript" src="Character%20Sequences%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 125px; position: relative; visibility: visible; width: 125px;"><ins id="aswift_0_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 125px; position: relative; visibility: visible; width: 125px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_0" name="aswift_0" style="left: 0pt; position: absolute; top: 0pt;" width="125" frameborder="0" height="125" scrolling="no"></iframe></ins></ins>
	</td>
	<td id="CH_main">
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Character%20Sequences%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_1_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_1" name="aswift_1" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins><br><div class="C_doctop">
<h1>Character Sequences</h1>
<div class="right"></div>
</div>
<div class="docsubtop">
<div class="right"></div>
<div class="prototype"></div>
</div>
As you may already know, the C++ Standard Library implements a powerful <a href="http://www.cplusplus.com/string">string</a>
class, which is very useful to handle and manipulate strings of
characters. However, because strings are in fact sequences of
characters, we can represent them also as plain arrays of <tt>char</tt> elements.<br>
<br>
For example, the following array:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code><var>char</var> jenny [20];</code></pre></td></tr></tbody></table></div>
<br>
<br>
is an array that can store up to 20 elements of type <tt>char</tt>. It can be represented as:<br>
<br>
<img src="Character%20Sequences%20-%20C++%20Documentation_files/c_strings1.gif" alt="">
<br>
Therefore, in this array, in theory, we can store sequences of
characters up to 20 characters long. But we can also store shorter
sequences. For example, <tt>jenny</tt> could store at some point in a program either the sequence <tt>"Hello"</tt> or the sequence <tt>"Merry christmas"</tt>, since both are shorter than 20 characters.<br>
<br>
Therefore, since the array of characters can store shorter sequences
than its total length, a special character is used to signal the end of
the valid sequence: the <i>null character</i>, whose literal constant can be written as <tt>'\0'</tt> (backslash, zero).<br>
<br>
Our array of 20 elements of type <tt>char</tt>, called <tt>jenny</tt>, can be represented storing the characters sequences <tt>"Hello"</tt> and <tt>"Merry Christmas"</tt> as:<br>
<br>
<img src="Character%20Sequences%20-%20C++%20Documentation_files/c_strings2.gif" alt="">
<br>
Notice how after the valid content a null character (<tt>'\0'</tt>) has been included in order to indicate the end of the sequence. The panels in gray color represent <tt>char</tt> elements with undetermined values.<br>
<br>
<h3>Initialization of null-terminated character sequences</h3>
Because arrays of characters are ordinary arrays they follow all their
same rules. For example, if we want to initialize an array of
characters with some predetermined sequence of characters we can do it
just like any other array: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code><var>char</var> myword[] = { <kbd>'H'</kbd>, <kbd>'e'</kbd>, <kbd>'l'</kbd>, <kbd>'l'</kbd>, <kbd>'o'</kbd>, <kbd>'\0'</kbd> }; </code></pre></td></tr></tbody></table></div>
<br>
<br>
In this case we would have declared an array of 6 elements of type <tt>char</tt> initialized with the characters that form the word <tt>"Hello"</tt> plus a null character <tt>'\0'</tt> at the end.<br>
But arrays of <tt>char</tt> elements have an additional method to initialize their values: using string literals.<br>
<br>
In the expressions we have used in some examples in previous chapters,
constants that represent entire strings of characters have already
showed up several times. These are specified enclosing the text to
become a string literal between double quotes ("). For example:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code><kbd>"the result is: "</kbd></code></pre></td></tr></tbody></table></div>
<br>
<br>
is a constant string literal that we have probably used already.<br>
<br>
Double quoted strings (<tt>"</tt>) are literal constants whose
type is in fact a null-terminated array of characters. So string
literals enclosed between double quotes always have a null character (<tt>'\0'</tt>) automatically appended at the end.<br>
<br>
Therefore we can initialize the array of <tt>char</tt> elements called <tt>myword</tt> with a null-terminated sequence of characters by either one of these two methods:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><var>char</var> myword [] = { <kbd>'H'</kbd>, <kbd>'e'</kbd>, <kbd>'l'</kbd>, <kbd>'l'</kbd>, <kbd>'o'</kbd>, <kbd>'\0'</kbd> };
<var>char</var> myword [] = <kbd>"Hello"</kbd>; </code></pre></td></tr></tbody></table></div>
<br>
<br>
In both cases the array of characters <tt>myword</tt> is declared with a size of 6 elements of type <tt>char</tt>: the 5 characters that compose the word <tt>"Hello"</tt> plus a final null character (<tt>'\0'</tt>) which specifies the end of the sequence and that, in the second case, when using double quotes (<tt>"</tt>) it is appended automatically.<br>
<br>
Please notice that we are talking about initializing an array of
characters in the moment it is being declared, and not about assigning
values to them once they have already been declared. In fact because
this type of null-terminated arrays of characters are regular arrays we
have the same restrictions that we have with any other array, so we are
not able to copy blocks of data with an assignment operation.<br>
<br>
Assuming <tt>mystext</tt> is a <tt>char[]</tt> variable, expressions within a source code like:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>mystext = <kbd>"Hello"</kbd>;
mystext[] = <kbd>"Hello"</kbd>; </code></pre></td></tr></tbody></table></div>
<br>
<br>
would <strong>not</strong> be valid, like neither would be:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>mystext = { <kbd>'H'</kbd>, <kbd>'e'</kbd>, <kbd>'l'</kbd>, <kbd>'l'</kbd>, <kbd>'o'</kbd>, <kbd>'\0'</kbd> };</code></pre></td></tr></tbody></table></div>
<br>
<br>
The reason for this may become more comprehensible once you know a bit
more about pointers, since then it will be clarified that an array is
in fact a constant pointer pointing to a block of memory.<br>
<br>
<h3>Using null-terminated sequences of characters</h3>
<br>
Null-terminated sequences of characters are the natural way of treating
strings in C++, so they can be used as such in many procedures. In
fact, regular string literals have this type (<tt>char[]</tt>) and can also be used in most cases.<br>
<br>
For example, <tt>cin</tt> and <tt>cout</tt> support
null-terminated sequences as valid containers for sequences of
characters, so they can be used directly to extract strings of
characters from <tt>cin</tt> or to insert them into <tt>cout</tt>. For example:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></tt></td>
<td class="source"><pre><code><cite>// null-terminated sequences of characters</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>char</var> question[]</code></pre></td></tr></tbody></table></div></td></tr></tbody></table></div></body></html>