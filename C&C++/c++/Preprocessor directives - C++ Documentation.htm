<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>


<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Preprocessor directives - C++ Documentation</title>
<style type="text/css">.hierarchy DIV {width:100px; height:24px; text-align:center; padding-top:8px; border:black 1px solid} </style>
<link rel="shortcut icon" type="image/x-icon" href="http://www.cplusplus.com/favicon.ico">
<link rel="stylesheet" type="text/css" href="Preprocessor%20directives%20-%20C++%20Documentation_files/main29f.css">
<script src="Preprocessor%20directives%20-%20C++%20Documentation_files/main29f.js" type="text/javascript"></script>
<script type="text/javascript">
new LoginBox('CH_boxLogin',1);</script>
</head><body>
<div id="CH_header">
	<a href="http://www.cplusplus.com/"><img src="Preprocessor%20directives%20-%20C++%20Documentation_files/cpp-logo.png" alt="cplusplus.com" width="198" height="75"></a>
	<div id="CH_bar">
		<b><a href="http://www.cplusplus.com/">C++</a> : <a href="http://www.cplusplus.com/doc/">Documentation</a> : <a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a> : Preprocessor directives</b>
	</div>
	
	<div id="CH_searchbox">
		<form id="search" action="/search.do" method="get">
		Search: <input name="q" size="13" class="txt"> <input value="Search" class="btn" type="submit">
		</form>
	</div>
	<div id="CH_boxLogin"><div class="C_LoginBox"><form style="display: block;" name="CH_frmLogin" id="CH_frmLogin" action="/user/access.cgi" onsubmit="elCH_boxLogin.send(); return false;" method="post"><table><tbody><tr><td></td><td class="right"><b>login:</b></td><td><input name="w" value="login" type="hidden"><input name="y" value="1" type="hidden"><input name="to" value="http://www.cplusplus.com/doc/tutorial/preprocessor/" type="hidden"><input class="txt" name="l" size="4" title="Type user name" type="text"></td><td><input class="txt" name="p" size="4" title="Type password" type="password"></td><td><input class="btn" value="sign in" type="submit"></td></tr><tr><td>sign in using:<a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=google&amp;to=%2Fdoc%2Ftutorial%2Fpreprocessor%2F" title="Sign in using your google account"><img src="Preprocessor%20directives%20-%20C++%20Documentation_files/16google.png" width="16" height="16"></a><a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=yahoo&amp;to=%2Fdoc%2Ftutorial%2Fpreprocessor%2F" title="Sign in using your Yahoo! account"><img src="Preprocessor%20directives%20-%20C++%20Documentation_files/16yahoo.png" width="16" height="16"></a></td><td colspan="4" class="right"><label for="rememberme">remember me<input class="chk" name="rememberme" id="rememberme" value="1" type="checkbox"> &nbsp; [<a href="http://www.cplusplus.com/user/access.cgi?w=signup">register</a>]</label></td></tr></tbody></table></form><div id="CH_insLogin"></div></div></div>
</div>
<div id="CH_container">
<table id="CH_containertbl"><tbody><tr>
<td id="CH_nav">
<table class="box">
<thead>
<tr><th><a href="http://www.cplusplus.com/">cplusplus.com</a></th></tr>
</thead>
<tbody>
<tr><td class="folder"><a href="http://www.cplusplus.com/info/">Information</a></td></tr>
<tr><td class="folder selected"><a href="http://www.cplusplus.com/doc/">Documentation</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/reference/">Reference</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/articles/">Articles</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/forum/">Forum</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/">Documentation</a></th></tr></thead>
<tbody><tr><td class="selected folder"><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/ascii/">Ascii Codes</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/boolean/">Boolean Operations</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/hex/">Numerical Bases</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></th></tr></thead>
<tbody><tr><td class="folder">Introduction:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/introduction/">Instructions for use</a></td></tr>
<tr><td class="folder">Basics of C++:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/program_structure/">Structure of a program</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/variables/">Variables. Data Types.</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/constants/">Constants</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/operators/">Operators</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/basic_io/">Basic Input/Output</a></td></tr>
<tr><td class="folder">Control Structures:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/control/">Control Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions/">Functions (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions2/">Functions (II)</a></td></tr>
<tr><td class="folder">Compound Data Types:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/arrays/">Arrays</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/ntcs/">Character Sequences</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/pointers/">Pointers</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/dynamic/">Dynamic Memory</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/structures/">Data Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/other_data_types/">Other Data Types</a></td></tr>
<tr><td class="folder">Object Oriented Programming:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes/">Classes (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes2/">Classes (II)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/inheritance/">Friendship and inheritance</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/polymorphism/">Polymorphism</a></td></tr>
<tr><td class="folder">Advanced Concepts:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/templates/">Templates</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/namespaces/">Namespaces</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/exceptions/">Exceptions</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/typecasting/">Type Casting</a></td></tr>
<tr><td class="selected indent"><a href="http://www.cplusplus.com/doc/tutorial/preprocessor/">Preprocessor directives</a></td></tr>
<tr><td class="folder">C++ Standard Library:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/files/">Input/Output with files</a></td></tr>
</tbody>
</table>
<div id="CH_subnav"></div>
<br>
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
/* single square */
google_ad_slot = "7465536459";
google_ad_width = 125;
google_ad_height = 125;
//-->
</script>
<script type="text/javascript" src="Preprocessor%20directives%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 125px; position: relative; visibility: visible; width: 125px;"><ins id="aswift_0_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 125px; position: relative; visibility: visible; width: 125px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_0" name="aswift_0" style="left: 0pt; position: absolute; top: 0pt;" width="125" frameborder="0" height="125" scrolling="no"></iframe></ins></ins>
	</td>
	<td id="CH_main">
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Preprocessor%20directives%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_1_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_1" name="aswift_1" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins><br><div class="C_doctop">
<h1>Preprocessor directives</h1>
<div class="right"></div>
</div>
<div class="docsubtop">
<div class="right"></div>
<div class="prototype"></div>
</div>
Preprocessor directives are lines included in the code of our programs
that are not program statements but directives for the preprocessor.
These lines are always preceded by a hash sign (<tt>#</tt>).
The preprocessor is executed before the actual compilation of code
begins, therefore the preprocessor digests all these directives before
any code is generated by the statements.<br>
<br>
These preprocessor directives extend only across a single line of code.
As soon as a newline character is found, the preprocessor directive is
considered to end. No semicolon (;) is expected at the end of a
preprocessor directive. The only way a preprocessor directive can
extend through more than one line is by preceding the newline character
at the end of the line by a backslash (<tt>\</tt>).<br>
<br>
<a name="#define"></a><a name="#undef"></a><h3>macro definitions (#define, #undef)</h3>
To define preprocessor macros we can use <tt>#define</tt>. Its format is:<br>
<br>
<tt>
#define identifier replacement<br>
</tt>
<br>
When the preprocessor encounters this directive, it replaces any occurrence of <tt>identifier</tt> in the rest of the code by <tt>replacement</tt>. This <tt>replacement</tt>
can be an expression, a statement, a block or simply anything. The
preprocessor does not understand C++, it simply replaces any occurrence
of <tt>identifier</tt> by <tt>replacement</tt>.<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br></tt></td>
<td class="source"><pre><code><dfn>#define TABLE_SIZE 100</dfn>
<var>int</var> table1[TABLE_SIZE];
<var>int</var> table2[TABLE_SIZE]; </code></pre></td></tr></tbody></table></div>
<br>
<br>
After the preprocessor has replaced <tt>TABLE_SIZE</tt>, the code becomes equivalent to:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><var>int</var> table1[100];
<var>int</var> table2[100]; </code></pre></td></tr></tbody></table></div>
<br>
<br>
This use of #define as constant definer is already known by us from previous tutorials, but <tt>#define</tt> can work also with parameters to define function macros:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code><dfn>#define getmax(a,b) a&gt;b?a:b </dfn></code></pre></td></tr></tbody></table></div>
<br>
<br>
This would replace any occurrence of <tt>getmax</tt> followed by
two arguments by the replacement expression, but also replacing each
argument by its identifier, exactly as you would expect if it was a
function:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></tt></td>
<td class="source"><pre><code><cite>// function macro</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<dfn>#define getmax(a,b) ((a)&gt;(b)?(a):(b))</dfn>

<var>int</var> main()
{
  <var>int</var> x=5, y;
  y= getmax(x,2);
  cout &lt;&lt; y &lt;&lt; endl;
  cout &lt;&lt; getmax(7,x) &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>5
7</samp></pre></td></tr></tbody></table></div>
<br>
<br>
Defined macros are not affected by block structure. A macro lasts until it is undefined with the #undef preprocessor directive:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br></tt></td>
<td class="source"><pre><code><dfn>#define TABLE_SIZE 100</dfn>
<var>int</var> table1[TABLE_SIZE];
<dfn>#undef TABLE_SIZE</dfn>
<dfn>#define TABLE_SIZE 200</dfn>
<var>int</var> table2[TABLE_SIZE];</code></pre></td></tr></tbody></table></div>
<br>
<br>
This would generate the same code as:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><var>int</var> table1[100];
<var>int</var> table2[200];</code></pre></td></tr></tbody></table></div>
<br>
<br>
Function macro definitions accept two special operators (<tt>#</tt> and <tt>##</tt>) in the replacement sequence:<br>
If the operator <tt>#</tt>
is used before a parameter is used in the replacement sequence, that
parameter is replaced by a string literal (as if it were enclosed
between double quotes)<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><dfn>#define str(x) #x</dfn>
cout &lt;&lt; str(test);</code></pre></td></tr></tbody></table></div>
<br>
<br>
This would be translated into:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>cout &lt;&lt; <kbd>"test"</kbd>;</code></pre></td></tr></tbody></table></div>
<br>
<br>
The operator <tt>##</tt> concatenates two arguments leaving no blank spaces between them:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><dfn>#define glue(a,b) a ## b</dfn>
glue(c,out) &lt;&lt; <kbd>"test"</kbd>;</code></pre></td></tr></tbody></table></div>
<br>
<br>
This would also be translated into:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>cout &lt;&lt; <kbd>"test"</kbd>;</code></pre></td></tr></tbody></table></div>
<br>
<br>
Because preprocessor replacements happen before any C++ syntax check,
macro definitions can be a tricky feature, but be careful: code that
relies heavily on complicated macros may seem obscure to other
programmers, since the syntax they expect is on many occasions
different from the regular expressions programmers expect in C++.<br>
<br>
<a name="#ifdef"></a><a name="#ifndef"></a><a name="#if"></a><a name="#endif"></a><a name="#else"></a><a name="#elif"></a><h3>Conditional inclusions (#ifdef, #ifndef, #if, #endif, #else and #elif)</h3>
<br>
These directives allow to include or discard part of the code of a program if a certain condition is met.<br>
<br>
<tt>#ifdef</tt> allows a section of a program to be compiled only if
the macro that is specified as the parameter has been defined, no
matter which its value is. For example: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br></tt></td>
<td class="source"><pre><code><dfn>#ifdef TABLE_SIZE</dfn>
<var>int</var> table[TABLE_SIZE];
<dfn>#endif  </dfn></code></pre></td></tr></tbody></table></div>
<br>
<br>
In this case, the line of code <tt>int table[TABLE_SIZE];</tt> is only compiled if <tt>TABLE_SIZE</tt> was previously defined with <tt>#define</tt>, independently of its value. If it was not defined, that line will not be included in the program compilation.<br>
<br>
<tt>#ifndef</tt> serves for the exact opposite: the code between <tt>#ifndef</tt> and <tt>#endif</tt> directives is only compiled if the specified identifier has not been previously defined. For example:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br></tt></td>
<td class="source"><pre><code><dfn>#ifndef TABLE_SIZE</dfn>
<dfn>#define TABLE_SIZE 100</dfn>
<dfn>#endif</dfn>
<var>int</var> table[TABLE_SIZE];</code></pre></td></tr></tbody></table></div>
<br>
<br>
In this case, if when arriving at this piece of code, the <tt>TABLE_SIZE</tt>
macro has not been defined yet, it would be defined to a value of 100.
If it already existed it would keep its previous value since the <tt>#define</tt> directive would not be executed.<br>
<br>
The <tt>#if</tt>, <tt>#else</tt> and <tt>#elif</tt> (i.e., "else
if") directives serve to specify some condition to be met in order for
the portion of code they surround to be compiled. The condition that
follows <tt>#if</tt> or <tt>#elif</tt> can only evaluate constant expressions, including macro expressions. For example: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></tt></td>
<td class="source"><pre><code><dfn>#if TABLE_SIZE&gt;200</dfn>
<dfn>#undef TABLE_SIZE</dfn>
<dfn>#define TABLE_SIZE 200</dfn>
 
<dfn>#elif TABLE_SIZE&lt;50</dfn>
<dfn>#undef TABLE_SIZE</dfn>
<dfn>#define TABLE_SIZE 50</dfn>
 
<dfn>#else</dfn>
<dfn>#undef TABLE_SIZE</dfn>
<dfn>#define TABLE_SIZE 100</dfn>
<dfn>#endif</dfn>
 
<var>int</var> table[TABLE_SIZE]; </code></pre></td></tr></tbody></table></div>
<br>
<br>
Notice how the whole structure of <tt>#if</tt>, <tt>#elif</tt> and <tt>#else</tt> chained directives ends with <tt>#endif</tt>.<br>
<br>
The behavior of <tt>#ifdef</tt> and <tt>#ifndef</tt> can also be achieved by using the special operators <tt>defined</tt> and <tt>!defined</tt> respectively in any <tt>#if</tt> or <tt>#elif</tt> directive:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br></tt></td>
<td class="source"><pre><code><dfn>#if !defined TABLE_SIZE</dfn>
<dfn>#define TABLE_SIZE 100</dfn>
<dfn>#elif defined ARRAY_SIZE</dfn>
<dfn>#define TABLE_SIZE ARRAY_SIZE</dfn>
<var>int</var> table[TABLE_SIZE];
<dfn>#endif </dfn></code></pre></td></tr></tbody></table></div>
<br>
<br>
<a name="#line"></a><h3>Line control (#line)</h3>
When we compile a program and some error happens during the compiling
process, the compiler shows an error message with references to the
name of the file where the error happened and a line number, so it is
easier to find the code generating the error.<br>
<br>
The <tt>#line</tt> directive allows us to control both things,
the line numbers within the code files as well as the file name that we
want that appears when an error takes place. Its format is: <br>
<br>
<tt>
#line number "filename"<br>
</tt>
<br>
Where <tt>number</tt> is the new line number that will be
assigned to the next code line. The line numbers of successive lines
will be increased one by one from this point on.<br>
<br>
<tt>"filename"</tt> is an optional parameter that allows to redefine the file name that will be shown. For example: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><dfn>#line 20 "assigning variable"</dfn>
<var>int</var> a?; </code></pre></td></tr></tbody></table></div>
<br>
<br>
This code will generate an error that will be shown as error in file <tt>"assigning variable"</tt>, line 20.<br>
<br>
<a name="#error"></a><h3>Error directive (#error)</h3>
This directive aborts the compilation process when it is found,
generating a compilation the error that can be specified as its
parameter:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br></tt></td>
<td class="source"><pre><code><dfn>#ifndef __cplusplus</dfn>
<dfn>#error A C++ compiler is required!</dfn>
<dfn>#endif </dfn></code></pre></td></tr></tbody></table></div>
<br>
<br>
This example aborts the compilation process if the macro name <tt>__cplusplus</tt> is not defined (this macro name is defined by default in all C++ compilers).<br>
<br>
<a name="#include"></a><h3>Source file inclusion (#include)</h3>
This directive has also been used assiduously in other sections of this tutorial. When the preprocessor finds an <tt>#include</tt> directive it replaces it by the entire content of the specified file. There are two ways to specify a file to be included: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><dfn>#include "file"</dfn>
<dfn>#include &lt;file&gt; </dfn></code></pre></td></tr></tbody></table></div>
<br>
<br>
The only difference between both expressions is the places
(directories) where the compiler is going to look for the file. In the
first case where the file name is specified between double-quotes, the
file is searched first in the same directory that includes the file
containing the directive. In case that it is not there, the compiler
searches the file in the default directories where it is configured to
look for the standard header files.<br>
If the file name is enclosed between angle-brackets <tt>&lt;&gt;</tt>
the file is searched directly where the compiler is configured to look
for the standard header files. Therefore, standard header files are
usually included in angle-brackets, while other specific header files
are included using quotes.<br>
<br>
<a name="#pragma"></a><h3>Pragma directive (#pragma)</h3>
This directive is used to specify diverse options to the compiler.
These options are specific for the platform and the compiler you use.
Consult the manual or the reference of your compiler for more
information on the possible parameters that you can define with <tt>#pragma</tt>.<br>
<br>
If the compiler does not support a specific argument for <tt>#pragma</tt>, it is ignored - no error is generated.<br>
<br>
<h3>Predefined macro names</h3>
The following macro names are defined at any time:<br>
<br>
<table class="boxed">
<tbody><tr><th>macro</th><th>value</th></tr>
<tr><td>__LINE__</td><td>Integer value representing the current line in the source code file being compiled.</td></tr>
<tr><td>__FILE__</td><td>A string literal containing the presumed name of the source file being compiled.</td></tr>
<tr><td>__DATE__</td><td>A string literal in the form "Mmm dd yyyy" containing the date in which the compilation process began.</td></tr>
<tr><td>__TIME__</td><td>A string literal in the form "hh:mm:ss" containing the time at which the compilation process began.</td></tr>
<tr><td>__cplusplus</td><td>An integer value. All C++ compilers have
this constant defined to some value. If the compiler is fully compliant
with the C++ standard its value is equal or greater than 199711L
depending on the version of the standard they comply.</td></tr>
</tbody></table>
<br>
For example:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></tt></td>
<td class="source"><pre><code><cite>// standard macro names</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main()
{
  cout &lt;&lt; <kbd>"This is the line number "</kbd> &lt;&lt; __LINE__;
  cout &lt;&lt; <kbd>" of file "</kbd> &lt;&lt; __FILE__ &lt;&lt; <kbd>".\n"</kbd>;
  cout &lt;&lt; <kbd>"Its compilation began "</kbd> &lt;&lt; __DATE__;
  cout &lt;&lt; <kbd>" at "</kbd> &lt;&lt; __TIME__ &lt;&lt; <kbd>".\n"</kbd>;
  cout &lt;&lt; <kbd>"The compiler gives a __cplusplus value of "</kbd> &lt;&lt; __cplusplus;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>This is the line number 7 of file /home/jay/stdmacronames.cpp.
Its compilation began Nov  1 2005 at 10:12:29.
The compiler gives a __cplusplus value of 1</samp></pre></td></tr></tbody></table></div>
<br>
<table class="C_docPrevNext"><tbody><tr><td class="prev"><a href="http://www.cplusplus.com/doc/tutorial/typecasting/" rel="prev"><img src="Preprocessor%20directives%20-%20C++%20Documentation_files/navigate_previous.gif" alt="Previous">Previous:<br><b>Type Casting</b></a></td><td class="index"><a href="http://www.cplusplus.com/doc/tutorial/" rel="index"><img src="Preprocessor%20directives%20-%20C++%20Documentation_files/navigate_index.gif" alt="Index">Index</a></td><td class="next"><a href="http://www.cplusplus.com/doc/tutorial/files/" rel="next"><img src="Preprocessor%20directives%20-%20C++%20Documentation_files/navigate_next.gif" alt="Next">Next:<br><b>Input/Output with files</b></a></td></tr></tbody></table><div id="CH_bb"></div><script type="text/javascript">new doc_Page('CH_bb','/doc/item.cgi',23,0,0,32768);</script>
<p>

<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Preprocessor%20directives%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_2_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_2" name="aswift_2" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins>
</p></td></tr></tbody></table>
</div>
<div id="CH_footer">
	<a href="http://www.cplusplus.com/">Home page</a> | <a href="http://www.cplusplus.com/privacy.do">Privacy policy</a><br>© cplusplus.com, 2000-2011 - All rights reserved - <i>v2.9</i><br><a href="http://www.cplusplus.com/contact.do?referrer=http%3A%2F%2Fwww.cplusplus.com%2Fdoc%2Ftutorial%2Fpreprocessor%2F">Spotted an error? contact us</a>
</div>

<script src="Preprocessor%20directives%20-%20C++%20Documentation_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
onPrint.print();
var gso = new Session ('ssn29','rel29',14400,86400,1313153763);
_uacct = "UA-521783-1";
urchinTracker();
</script>
</body></html>