<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>


<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Variables. Data Types. - C++ Documentation</title>
<style type="text/css">.hierarchy DIV {width:100px; height:24px; text-align:center; padding-top:8px; border:black 1px solid} </style>
<link rel="shortcut icon" type="image/x-icon" href="http://www.cplusplus.com/favicon.ico">
<link rel="stylesheet" type="text/css" href="Variables.%20Data%20Types.%20-%20C++%20Documentation_files/main29f.css">
<script src="Variables.%20Data%20Types.%20-%20C++%20Documentation_files/main29f.js" type="text/javascript"></script>
<script type="text/javascript">
new LoginBox('CH_boxLogin',1);</script>
</head><body>
<div id="CH_header">
	<a href="http://www.cplusplus.com/"><img src="Variables.%20Data%20Types.%20-%20C++%20Documentation_files/cpp-logo.png" alt="cplusplus.com" width="198" height="75"></a>
	<div id="CH_bar">
		<b><a href="http://www.cplusplus.com/">C++</a> : <a href="http://www.cplusplus.com/doc/">Documentation</a> : <a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a> : Variables. Data Types.</b>
	</div>
	
	<div id="CH_searchbox">
		<form id="search" action="/search.do" method="get">
		Search: <input name="q" size="13" class="txt"> <input value="Search" class="btn" type="submit">
		</form>
	</div>
	<div id="CH_boxLogin"><div class="C_LoginBox"><form style="display: block;" name="CH_frmLogin" id="CH_frmLogin" action="/user/access.cgi" onsubmit="elCH_boxLogin.send(); return false;" method="post"><table><tbody><tr><td></td><td class="right"><b>login:</b></td><td><input name="w" value="login" type="hidden"><input name="y" value="1" type="hidden"><input name="to" value="http://www.cplusplus.com/doc/tutorial/variables/" type="hidden"><input class="txt" name="l" size="4" title="Type user name" type="text"></td><td><input class="txt" name="p" size="4" title="Type password" type="password"></td><td><input class="btn" value="sign in" type="submit"></td></tr><tr><td>sign in using:<a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=google&amp;to=%2Fdoc%2Ftutorial%2Fvariables%2F" title="Sign in using your google account"><img src="Variables.%20Data%20Types.%20-%20C++%20Documentation_files/16google.png" width="16" height="16"></a><a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=yahoo&amp;to=%2Fdoc%2Ftutorial%2Fvariables%2F" title="Sign in using your Yahoo! account"><img src="Variables.%20Data%20Types.%20-%20C++%20Documentation_files/16yahoo.png" width="16" height="16"></a></td><td colspan="4" class="right"><label for="rememberme">remember me<input class="chk" name="rememberme" id="rememberme" value="1" type="checkbox"> &nbsp; [<a href="http://www.cplusplus.com/user/access.cgi?w=signup">register</a>]</label></td></tr></tbody></table></form><div id="CH_insLogin"></div></div></div>
</div>
<div id="CH_container">
<table id="CH_containertbl"><tbody><tr>
<td id="CH_nav">
<table class="box">
<thead>
<tr><th><a href="http://www.cplusplus.com/">cplusplus.com</a></th></tr>
</thead>
<tbody>
<tr><td class="folder"><a href="http://www.cplusplus.com/info/">Information</a></td></tr>
<tr><td class="folder selected"><a href="http://www.cplusplus.com/doc/">Documentation</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/reference/">Reference</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/articles/">Articles</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/forum/">Forum</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/">Documentation</a></th></tr></thead>
<tbody><tr><td class="selected folder"><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/ascii/">Ascii Codes</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/boolean/">Boolean Operations</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/hex/">Numerical Bases</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></th></tr></thead>
<tbody><tr><td class="folder">Introduction:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/introduction/">Instructions for use</a></td></tr>
<tr><td class="folder">Basics of C++:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/program_structure/">Structure of a program</a></td></tr>
<tr><td class="selected indent"><a href="http://www.cplusplus.com/doc/tutorial/variables/">Variables. Data Types.</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/constants/">Constants</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/operators/">Operators</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/basic_io/">Basic Input/Output</a></td></tr>
<tr><td class="folder">Control Structures:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/control/">Control Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions/">Functions (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions2/">Functions (II)</a></td></tr>
<tr><td class="folder">Compound Data Types:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/arrays/">Arrays</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/ntcs/">Character Sequences</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/pointers/">Pointers</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/dynamic/">Dynamic Memory</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/structures/">Data Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/other_data_types/">Other Data Types</a></td></tr>
<tr><td class="folder">Object Oriented Programming:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes/">Classes (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes2/">Classes (II)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/inheritance/">Friendship and inheritance</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/polymorphism/">Polymorphism</a></td></tr>
<tr><td class="folder">Advanced Concepts:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/templates/">Templates</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/namespaces/">Namespaces</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/exceptions/">Exceptions</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/typecasting/">Type Casting</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/preprocessor/">Preprocessor directives</a></td></tr>
<tr><td class="folder">C++ Standard Library:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/files/">Input/Output with files</a></td></tr>
</tbody>
</table>
<div id="CH_subnav"></div>
<br>
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
/* single square */
google_ad_slot = "7465536459";
google_ad_width = 125;
google_ad_height = 125;
//-->
</script>
<script type="text/javascript" src="Variables.%20Data%20Types.%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 125px; position: relative; visibility: visible; width: 125px;"><ins id="aswift_0_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 125px; position: relative; visibility: visible; width: 125px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_0" name="aswift_0" style="left: 0pt; position: absolute; top: 0pt;" width="125" frameborder="0" height="125" scrolling="no"></iframe></ins></ins>
	</td>
	<td id="CH_main">
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Variables.%20Data%20Types.%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_1_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_1" name="aswift_1" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins><br><div class="C_doctop">
<h1>Variables. Data Types.</h1>
<div class="right"></div>
</div>
<div class="docsubtop">
<div class="right"></div>
<div class="prototype"></div>
</div>
The usefulness of the <em>"Hello World"</em> programs shown in
the previous section is quite questionable. We had to write several
lines of code, compile them, and then execute the resulting program
just to obtain a simple sentence written on the screen as result. It
certainly would have been much faster to type the output sentence by
ourselves. However, programming is not limited only to printing simple
texts on the screen. In order to go a little further on and to become
able to write programs that perform useful tasks that really save us
work we need to introduce the concept of <em>variable</em>.<br>
<br>
Let us think that I ask you to retain the number 5 in your mental
memory, and then I ask you to memorize also the number 2 at the same
time. You have just stored two different values in your memory. Now, if
I ask you to add 1 to the first number I said, you should be retaining
the numbers 6 (that is 5+1) and 2 in your memory. Values that we could
now for example subtract and obtain 4 as result.<br>
<br>
The whole process that you have just done with your mental memory is a
simile of what a computer can do with two variables. The same process
can be expressed in C++ with the following instruction set: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br></tt></td>
<td class="source"><pre><code>a = 5;
b = 2;
a = a + 1;
result = a - b;</code></pre></td></tr></tbody></table></div>
<br>
<br>
Obviously, this is a very simple example since we have only used two
small integer values, but consider that your computer can store
millions of numbers like these at the same time and conduct
sophisticated mathematical operations with them.<br>
<br>
Therefore, we can define a <dfn>variable</dfn> as a portion of memory to store a determined value.<br>
<br>
Each variable needs an identifier that distinguishes it from the others. For example, in the previous code the <em>variable identifiers</em> were <code>a</code>, <code>b</code> and <code>result</code>, but we could have called the variables any names we wanted to invent, as long as they were valid identifiers.<br>
<br>
<h3>Identifiers</h3>
A <dfn>valid identifier</dfn> is a sequence of one or more letters, digits or underscore characters (<code>_</code>).
Neither spaces nor punctuation marks or symbols can be part of an
identifier. Only letters, digits and single underscore characters are
valid. In addition, variable identifiers always have to begin with a
letter. They can also begin with an underline character (<code>_</code>
), but in some cases these may be reserved for compiler specific
keywords or external identifiers, as well as identifiers containing two
successive underscore characters anywhere. In no case can they begin
with a digit.<br>
<br>
Another rule that you have to consider when inventing your own
identifiers is that they cannot match any keyword of the C++ language
nor your compiler's specific ones, which are <em>reserved keywords</em>. The standard reserved keywords are:<br>
<br>
<code>
asm, auto, bool, break, case, catch, char, class, const, const_cast,
continue, default, delete, do, double, dynamic_cast, else, enum,
explicit, export, extern, false, float, for, friend, goto, if, inline,
int, long, mutable, namespace, new, operator, private, protected,
public, register, reinterpret_cast, return, short, signed, sizeof,
static, static_cast, struct, switch, template, this, throw, true, try,
typedef, typeid, typename, union, unsigned, using, virtual, void,
volatile, wchar_t, while <br>
</code>
<br>
Additionally, alternative representations for some operators cannot be
used as identifiers since they are reserved words under some
circumstances: <br>
<br>
<code>
and, and_eq, bitand, bitor, compl, not, not_eq, or, or_eq, xor, xor_eq <br>
</code>
<br>
Your compiler may also include some additional specific reserved keywords.<br>
 <br>
<strong>Very important:</strong> The C++ language is a <em>"case sensitive"</em>
language. That means that an identifier written in capital letters is
not equivalent to another one with the same name but written in small
letters. Thus, for example, the <code>RESULT</code> variable is not the same as the <code>result</code> variable or the <code>Result</code> variable. These are three different variable identifiers.<br>
<br>
<h3>Fundamental data types</h3>
When programming, we store the variables in our computer's memory, but
the computer has to know what kind of data we want to store in them,
since it is not going to occupy the same amount of memory to store a
simple number than to store a single letter or a large number, and they
are not going to be interpreted the same way.<br>
<br>
The memory in our computers is organized in bytes. A byte is the
minimum amount of memory that we can manage in C++. A byte can store a
relatively small amount of data: one single character or a small
integer (generally an integer between 0 and 255). In addition, the
computer can manipulate more complex data types that come from grouping
several bytes, such as long numbers or non-integer numbers.<br>
<br>
Next you have a summary of the basic fundamental data types in C++, as
well as the range of values that can be represented with each one:<br>
 <br>
<table class="boxed">
<tbody><tr><th>Name</th><th>Description</th><th>Size*</th><th>Range*</th></tr>
<tr><td><code>char</code></td>
 <td>Character or small integer.</td>
 <td>1byte</td>
 <td>signed: -128 to 127<br>
 unsigned: 0 to 255</td></tr>
<tr><td><code>short int</code>
(<code>short</code>)</td>
 <td>Short Integer.</td>
 <td>2bytes</td>
 <td>signed: -32768 to 32767<br>
 unsigned: 0 to 65535</td></tr>
<tr><td><code>int</code></td>
 <td>Integer.</td>
 <td>4bytes</td>
 <td>signed: -2147483648 to 2147483647<br>
 unsigned: 0 to 4294967295</td></tr>
<tr><td><code>long int</code>
(<code>long</code>)</td>
 <td>Long integer.</td>
 <td>4bytes</td>
 <td>signed: -2147483648 to 2147483647<br>
 unsigned: 0 to 4294967295</td></tr>
<tr><td><code>bool</code></td>
 <td>Boolean value. It can take one of two values: true or false.</td>
 <td>1byte</td>
 <td><code>true</code> or <code>false</code></td></tr>
<tr><td><code>float</code></td>
 <td>Floating point number.</td>
 <td>4bytes</td>
 <td>+/- 3.4e +/- 38 (~7 digits)</td></tr>
<tr><td><code>double</code></td>
 <td>Double precision floating point number.</td>
 <td>8bytes</td>
 <td>+/- 1.7e +/- 308 (~15 digits)</td></tr>
<tr><td><code>long double</code></td>
 <td>Long double precision floating point number.</td>
 <td>8bytes</td>
 <td>+/- 1.7e +/- 308 (~15 digits)</td></tr>
<tr><td><code>wchar_t</code></td>
 <td>Wide character.</td>
 <td>2 <i>or</i> 4 bytes</td>
 <td>1 wide character</td></tr>
</tbody></table>
<br>
* The values of the columns <em>Size</em> and <em>Range</em>
depend on the system the program is compiled for. The values shown
above are those found on most 32-bit systems. But for other systems,
the general specification is that <code>int</code> has the natural size suggested by the system architecture (one <em>"word"</em>) and the four integer types <code>char</code>, <code>short</code>, <code>int</code> and <code>long</code> must each one be at least as large as the one preceding it, with <code>char</code> being always one byte in size. The same applies to the floating point types <code>float</code>, <code>double</code> and <code>long double</code>, where each one must provide at least as much precision as the preceding one.<br>
<br>
<h3>Declaration of variables</h3>
In order to use a variable in C++, we must first declare it specifying
which data type we want it to be. The syntax to declare a new variable
is to write the specifier of the desired data type (like int, bool,
float...) followed by a valid variable identifier. For example:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><var>int</var> a;
<var>float</var> mynumber;</code></pre></td></tr></tbody></table></div>
<br>
<br>
These are two valid declarations of variables. The first one declares a variable of type <var>int</var> with the identifier <var>a</var>. The second one declares a variable of type <var>float</var> with the identifier <var>mynumber</var>. Once declared, the variables <var>a</var> and <var>mynumber</var> can be used within the rest of their scope in the program.<br>
<br>
If you are going to declare more than one variable of the same type,
you can declare all of them in a single statement by separating their
identifiers with commas. For example:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code><var>int</var> a, b, c;</code></pre></td></tr></tbody></table></div>
<br>
<br>
This declares three variables (<var>a</var>, <var>b</var> and <var>c</var>), all of them of type <var>int</var>, and has exactly the same meaning as:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br></tt></td>
<td class="source"><pre><code><var>int</var> a;
<var>int</var> b;
<var>int</var> c;</code></pre></td></tr></tbody></table></div>
<br>
<br>
The integer data types <var>char</var>, <var>short</var>, <var>long</var> and <var>int</var>
can be either signed or unsigned depending on the range of numbers
needed to be represented. Signed types can represent both positive and
negative values, whereas unsigned types can only represent positive
values (and zero). This can be specified by using either the specifier <var>signed</var> or the specifier <var>unsigned</var> before the type name. For example: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><var>unsigned</var> <var>short</var> <var>int</var> NumberOfSisters;
<var>signed</var> <var>int</var> MyAccountBalance;</code></pre></td></tr></tbody></table></div>
<br>
<br>
By default, if we do not specify either <var>signed</var> or <var>unsigned</var>
most compiler settings will assume the type to be signed, therefore
instead of the second declaration above we could have written:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code><var>int</var> MyAccountBalance;</code></pre></td></tr></tbody></table></div>
<br>
<br>
with exactly the same meaning (with or without the keyword <code>signed</code>)<br>
<br>
An exception to this general rule is the <var>char</var> type, which exists by itself and is considered a different fundamental data type from <var>signed char</var> and <var>unsigned char</var>, thought to store characters. You should use either <code>signed</code> or <code>unsigned</code> if you intend to store numerical values in a <var>char</var>-sized variable.<br>
<br>
<code>short</code> and <code>long</code> can be used alone as type specifiers. In this case, they refer to their respective integer fundamental types: <code>short</code> is equivalent to <code>short int</code> and <code>long</code> is equivalent to <code>long int</code>. The following two variable declarations are equivalent:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><var>short</var> Year;
<var>short</var> <var>int</var> Year;</code></pre></td></tr></tbody></table></div>
<br>
<br>
Finally, <code>signed</code> and <code>unsigned</code> may also be used as standalone type specifiers, meaning the same as <code>signed int</code> and <code>unsigned int</code> respectively. The following two declarations are equivalent: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><var>unsigned</var> NextYear;
<var>unsigned</var> <var>int</var> NextYear;</code></pre></td></tr></tbody></table></div>
<br>
<br>
To see what variable declarations look like in action within a program,
we are going to see the C++ code of the example about your mental
memory proposed at the beginning of this section:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></tt></td>
<td class="source"><pre><code><cite>// operating with variables</cite>

<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <cite>// declaring variables:</cite>
  <var>int</var> a, b;
  <var>int</var> result;

  <cite>// process:</cite>
  a = 5;
  b = 2;
  a = a + 1;
  result = a - b;

  <cite>// print out the result:</cite>
  cout &lt;&lt; result;

  <cite>// terminate the program:</cite>
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>4</samp></pre></td></tr></tbody></table></div>
<br>
<br>
Do not worry if something else than the variable declarations
themselves looks a bit strange to you. You will see the rest in detail
in coming sections. <br>
<br>
<h3>Scope of variables</h3>
All the variables that we intend to use in a program must have been
declared with its type specifier in an earlier point in the code, like
we did in the previous code at the beginning of the body of the
function main when we declared that <var>a</var>, <var>b</var>, and <var>result</var> were of type <var>int</var>.<br>
<br>
A variable can be either of global or local scope. A global variable is
a variable declared in the main body of the source code, outside all
functions, while a local variable is one declared within the body of a
function or a block.<br>
<br>
<img src="Variables.%20Data%20Types.%20-%20C++%20Documentation_files/scope_of_variables.gif" alt="">
<br>
Global variables can be referred from anywhere in the code, even inside functions, whenever it is after its declaration.<br>
<br>
The scope of local variables is limited to the block enclosed in braces (<code>{}</code>) where they are declared. For example, if they are declared at the beginning of the body of a function (like in function <var>main</var>)
their scope is between its declaration point and the end of that
function. In the example above, this means that if another function
existed in addition to <var>main</var>, the local variables declared in <var>main</var> could not be accessed from the other function and vice versa.<br>
 <br>
<h3>Initialization of variables</h3>
When declaring a regular local variable, its value is by default
undetermined. But you may want a variable to store a concrete value at
the same moment that it is declared. In order to do that, you can
initialize the variable. There are two ways to do this in C++:<br>
<br>
The first one, known as <dfn>c-like initialization</dfn>, is done by appending an equal sign followed by the value to which the variable will be initialized:<br>
<br>
<code>type identifier = initial_value ;</code>
<br>
For example, if we want to declare an <var>int</var> variable called <var>a</var> initialized with a value of 0 at the moment in which it is declared, we could write:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code><var>int</var> a = 0;</code></pre></td></tr></tbody></table></div>
<br>
<br>
The other way to initialize variables, known as <dfn>constructor initialization</dfn>, is done by enclosing the initial value between parentheses (<code>()</code>): <br>
<br>
<code>type identifier (initial_value) ;</code>
<br>
For example:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code><var>int</var> a (0); </code></pre></td></tr></tbody></table></div>
<br>
<br>
Both ways of initializing variables are valid and equivalent in C++.<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></tt></td>
<td class="source"><pre><code><cite>// initialization of variables</cite>

<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> a=5;               <cite>// initial value = 5</cite>
  <var>int</var> b(2);              <cite>// initial value = 2</cite>
  <var>int</var> result;            <cite>// initial value undetermined</cite>

  a = a + 3;
  result = a - b;
  cout &lt;&lt; result;

  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>6</samp></pre></td></tr></tbody></table></div>
<br>
<br>
<h3>Introduction to strings</h3>
Variables that can store non-numerical values that are longer than one single character are known as strings.<br>
<br>
The C++ language library provides support for strings through the standard <code>string</code> class. This is not a fundamental type, but it behaves in a similar way as fundamental types do in its most basic usage.<br>
 <br>
A first difference with fundamental data types is that in order to
declare and use objects (variables) of this type we need to include an
additional header file in our source code: <code>&lt;string&gt;</code> and have access to the <code>std</code> namespace (which we already had in all our previous programs thanks to the <code>using namespace</code> statement).<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></tt></td>
<td class="source"><pre><code><cite>// my first string</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  string mystring = <kbd>"This is a string"</kbd>;
  cout &lt;&lt; mystring;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>This is a string</samp></pre></td></tr></tbody></table></div>
<br>
<br>
As you may see in the previous example, strings can be initialized with
any valid string literal just like numerical type variables can be
initialized to any valid numerical literal. Both initialization formats
are valid with strings:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code>string mystring = <kbd>"This is a string"</kbd>;
string mystring (<kbd>"This is a string"</kbd>);</code></pre></td></tr></tbody></table></div>
<br>
<br>
Strings can also perform all the other basic operations that
fundamental data types can, like being declared without an initial
value and being assigned values during execution:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></tt></td>
<td class="source"><pre><code><cite>// my first string</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  string mystring;
  mystring = <kbd>"This is the initial string content"</kbd>;
  cout &lt;&lt; mystring &lt;&lt; endl;
  mystring = <kbd>"This is a different string content"</kbd>;
  cout &lt;&lt; mystring &lt;&lt; endl;
  <var>return</var> 0;
}
</code></pre></td>
<td class="output"><pre><samp>This is the initial string content
This is a different string content</samp></pre></td></tr></tbody></table></div>
<br>
<br>
For more details on C++ strings, you can have a look at the <a href="http://www.cplusplus.com/string">string class reference</a>.<br>
<table class="C_docPrevNext"><tbody><tr><td class="prev"><a href="http://www.cplusplus.com/doc/tutorial/program_structure/" rel="prev"><img src="Variables.%20Data%20Types.%20-%20C++%20Documentation_files/navigate_previous.gif" alt="Previous">Previous:<br><b>Structure of a program</b></a></td><td class="index"><a href="http://www.cplusplus.com/doc/tutorial/" rel="index"><img src="Variables.%20Data%20Types.%20-%20C++%20Documentation_files/navigate_index.gif" alt="Index">Index</a></td><td class="next"><a href="http://www.cplusplus.com/doc/tutorial/constants/" rel="next"><img src="Variables.%20Data%20Types.%20-%20C++%20Documentation_files/navigate_next.gif" alt="Next">Next:<br><b>Constants</b></a></td></tr></tbody></table><div id="CH_bb"></div><script type="text/javascript">new doc_Page('CH_bb','/doc/item.cgi',2,0,0,32768);</script>
<p>

<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Variables.%20Data%20Types.%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_2_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_2" name="aswift_2" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins>
</p></td></tr></tbody></table>
</div>
<div id="CH_footer">
	<a href="http://www.cplusplus.com/">Home page</a> | <a href="http://www.cplusplus.com/privacy.do">Privacy policy</a><br>© cplusplus.com, 2000-2011 - All rights reserved - <i>v2.9</i><br><a href="http://www.cplusplus.com/contact.do?referrer=http%3A%2F%2Fwww.cplusplus.com%2Fdoc%2Ftutorial%2Fvariables%2F">Spotted an error? contact us</a>
</div>

<script src="Variables.%20Data%20Types.%20-%20C++%20Documentation_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
onPrint.print();
var gso = new Session ('ssn29','rel29',14400,86400,1313153516);
_uacct = "UA-521783-1";
urchinTracker();
</script>
</body></html>