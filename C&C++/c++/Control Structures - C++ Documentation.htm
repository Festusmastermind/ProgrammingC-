<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>


<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Control Structures - C++ Documentation</title>
<style type="text/css">.hierarchy DIV {width:100px; height:24px; text-align:center; padding-top:8px; border:black 1px solid} </style>
<link rel="shortcut icon" type="image/x-icon" href="http://www.cplusplus.com/favicon.ico">
<link rel="stylesheet" type="text/css" href="Control%20Structures%20-%20C++%20Documentation_files/main29f.css">
<script src="Control%20Structures%20-%20C++%20Documentation_files/main29f.js" type="text/javascript"></script>
<script type="text/javascript">
new LoginBox('CH_boxLogin',1);</script>
</head><body>
<div id="CH_header">
	<a href="http://www.cplusplus.com/"><img src="Control%20Structures%20-%20C++%20Documentation_files/cpp-logo.png" alt="cplusplus.com" width="198" height="75"></a>
	<div id="CH_bar">
		<b><a href="http://www.cplusplus.com/">C++</a> : <a href="http://www.cplusplus.com/doc/">Documentation</a> : <a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a> : Control Structures</b>
	</div>
	
	<div id="CH_searchbox">
		<form id="search" action="/search.do" method="get">
		Search: <input name="q" size="13" class="txt"> <input value="Search" class="btn" type="submit">
		</form>
	</div>
	<div id="CH_boxLogin"><div class="C_LoginBox"><form style="display: block;" name="CH_frmLogin" id="CH_frmLogin" action="/user/access.cgi" onsubmit="elCH_boxLogin.send(); return false;" method="post"><table><tbody><tr><td></td><td class="right"><b>login:</b></td><td><input name="w" value="login" type="hidden"><input name="y" value="1" type="hidden"><input name="to" value="http://www.cplusplus.com/doc/tutorial/control/" type="hidden"><input class="txt" name="l" size="4" title="Type user name" type="text"></td><td><input class="txt" name="p" size="4" title="Type password" type="password"></td><td><input class="btn" value="sign in" type="submit"></td></tr><tr><td>sign in using:<a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=google&amp;to=%2Fdoc%2Ftutorial%2Fcontrol%2F" title="Sign in using your google account"><img src="Control%20Structures%20-%20C++%20Documentation_files/16google.png" width="16" height="16"></a><a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=yahoo&amp;to=%2Fdoc%2Ftutorial%2Fcontrol%2F" title="Sign in using your Yahoo! account"><img src="Control%20Structures%20-%20C++%20Documentation_files/16yahoo.png" width="16" height="16"></a></td><td colspan="4" class="right"><label for="rememberme">remember me<input class="chk" name="rememberme" id="rememberme" value="1" type="checkbox"> &nbsp; [<a href="http://www.cplusplus.com/user/access.cgi?w=signup">register</a>]</label></td></tr></tbody></table></form><div id="CH_insLogin"></div></div></div>
</div>
<div id="CH_container">
<table id="CH_containertbl"><tbody><tr>
<td id="CH_nav">
<table class="box">
<thead>
<tr><th><a href="http://www.cplusplus.com/">cplusplus.com</a></th></tr>
</thead>
<tbody>
<tr><td class="folder"><a href="http://www.cplusplus.com/info/">Information</a></td></tr>
<tr><td class="folder selected"><a href="http://www.cplusplus.com/doc/">Documentation</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/reference/">Reference</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/articles/">Articles</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/forum/">Forum</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/">Documentation</a></th></tr></thead>
<tbody><tr><td class="selected folder"><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/ascii/">Ascii Codes</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/boolean/">Boolean Operations</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/hex/">Numerical Bases</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></th></tr></thead>
<tbody><tr><td class="folder">Introduction:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/introduction/">Instructions for use</a></td></tr>
<tr><td class="folder">Basics of C++:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/program_structure/">Structure of a program</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/variables/">Variables. Data Types.</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/constants/">Constants</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/operators/">Operators</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/basic_io/">Basic Input/Output</a></td></tr>
<tr><td class="folder">Control Structures:</td></tr>
<tr><td class="selected indent"><a href="http://www.cplusplus.com/doc/tutorial/control/">Control Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions/">Functions (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions2/">Functions (II)</a></td></tr>
<tr><td class="folder">Compound Data Types:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/arrays/">Arrays</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/ntcs/">Character Sequences</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/pointers/">Pointers</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/dynamic/">Dynamic Memory</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/structures/">Data Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/other_data_types/">Other Data Types</a></td></tr>
<tr><td class="folder">Object Oriented Programming:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes/">Classes (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes2/">Classes (II)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/inheritance/">Friendship and inheritance</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/polymorphism/">Polymorphism</a></td></tr>
<tr><td class="folder">Advanced Concepts:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/templates/">Templates</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/namespaces/">Namespaces</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/exceptions/">Exceptions</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/typecasting/">Type Casting</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/preprocessor/">Preprocessor directives</a></td></tr>
<tr><td class="folder">C++ Standard Library:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/files/">Input/Output with files</a></td></tr>
</tbody>
</table>
<div id="CH_subnav"></div>
<br>
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
/* single square */
google_ad_slot = "7465536459";
google_ad_width = 125;
google_ad_height = 125;
//-->
</script>
<script type="text/javascript" src="Control%20Structures%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 125px; position: relative; visibility: visible; width: 125px;"><ins id="aswift_0_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 125px; position: relative; visibility: visible; width: 125px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_0" name="aswift_0" style="left: 0pt; position: absolute; top: 0pt;" width="125" frameborder="0" height="125" scrolling="no"></iframe></ins></ins>
	</td>
	<td id="CH_main">
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Control%20Structures%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_1_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_1" name="aswift_1" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins><br><div class="C_doctop">
<h1>Control Structures</h1>
<div class="right"></div>
</div>
<div class="docsubtop">
<div class="right"></div>
<div class="prototype"></div>
</div>
A program is usually not limited to a linear sequence of instructions.
During its process it may bifurcate, repeat code or take decisions. For
that purpose, C++ provides control structures that serve to specify
what has to be done by our program, when and under which circumstances.<br>
<br>
With the introduction of control structures we are going to have to introduce a new concept: the <i>compound-statement</i> or <i>block</i>.
A block is a group of statements which are separated by semicolons (;)
like all C++ statements, but grouped together in a block enclosed in
braces: <tt>{ }</tt>:<br>
<br>
<tt>
{ statement1; statement2; statement3; }<br>
</tt>
<br>
Most of the control structures that we will see in this section require
a generic statement as part of its syntax. A statement can be either a
simple statement (a simple instruction ending with a semicolon) or a
compound statement (several instructions grouped in a block), like the
one just described. In the case that we want the statement to be a
simple statement, we do not need to enclose it in braces (<tt>{}</tt>). But in the case that we want the statement to be a compound statement it must be enclosed between braces (<tt>{}</tt>), forming a block.<br>
<br>
<a name="if"></a><a name="else"></a><h3>Conditional structure: if and else</h3>
The <tt>if</tt> keyword is used to execute a statement or block only if a condition is fulfilled. Its form is:<br>
<br>
<tt>
if (condition) statement<br>
</tt>
<br>
Where <tt>condition</tt> is the expression that is being evaluated. If this condition is true, <tt>statement</tt> is executed. If it is false, <tt>statement</tt> is ignored (not executed) and the program continues right after this conditional structure.<br>
For example, the following code fragment prints <tt>x is 100</tt> only if the value stored in the <tt>x</tt> variable is indeed <tt>100</tt>:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><var>if</var> (x == 100)
  cout &lt;&lt; <kbd>"x is 100"</kbd>;</code></pre></td></tr></tbody></table></div>
<br>
<br>
If we want more than a single statement to be executed in case that the condition is true we can specify a block using braces <tt>{ }</tt>:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br></tt></td>
<td class="source"><pre><code><var>if</var> (x == 100)
{
   cout &lt;&lt; <kbd>"x is "</kbd>;
   cout &lt;&lt; x;
}</code></pre></td></tr></tbody></table></div>
<br>
<br>
We can additionally specify what we want to happen if the condition is not fulfilled by using the keyword <tt>else</tt>. Its form used in conjunction with <tt>if</tt> is:<br>
<br>
<tt>
if (condition) statement1 else statement2<br>
</tt>
<br>
For example:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br></tt></td>
<td class="source"><pre><code><var>if</var> (x == 100)
  cout &lt;&lt; <kbd>"x is 100"</kbd>;
<var>else</var>
  cout &lt;&lt; <kbd>"x is not 100"</kbd>;</code></pre></td></tr></tbody></table></div>
<br>
<br>
prints on the screen <tt>x is 100</tt> if indeed <tt>x</tt> has a value of <tt>100</tt>, but if it has not -and only if not- it prints out <tt>x is not 100</tt>.<br>
<br>
The <tt>if + else</tt> structures can be concatenated with the
intention of verifying a range of values. The following example shows
its use telling if the value currently stored in <tt>x</tt> is positive, negative or none of them (i.e. zero):<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br></tt></td>
<td class="source"><pre><code><var>if</var> (x &gt; 0)
  cout &lt;&lt; <kbd>"x is positive"</kbd>;
<var>else</var> <var>if</var> (x &lt; 0)
  cout &lt;&lt; <kbd>"x is negative"</kbd>;
<var>else</var>
  cout &lt;&lt; <kbd>"x is 0"</kbd>;</code></pre></td></tr></tbody></table></div>
<br>
<br>
Remember that in case that we want more than a single statement to be
executed, we must group them in a block by enclosing them in braces <tt>{ }</tt>.<br>
<br>
<a name="loops"></a><h3>Iteration structures (loops)</h3>
<br>
Loops have as purpose to repeat a statement a certain number of times or while a condition is fulfilled.<br>
<br>
<a name="while"></a><h4>The while loop</h4>
Its format is:<br>
<br>
<tt>
while (expression) statement<br>
</tt>
<br>
and its functionality is simply to repeat statement while the condition set in expression is true.<br>
For example, we are going to make a program to countdown using a while-loop:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></tt></td>
<td class="source"><pre><code><cite>// custom countdown using while</cite>

<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> n;
  cout &lt;&lt; <kbd>"Enter the starting number &gt; "</kbd>;
  cin &gt;&gt; n;

  <var>while</var> (n&gt;0) {
    cout &lt;&lt; n &lt;&lt; <kbd>", "</kbd>;
    --n;
  }

  cout &lt;&lt; <kbd>"FIRE!\n"</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>Enter the starting number &gt; 8
8, 7, 6, 5, 4, 3, 2, 1, FIRE!</samp></pre></td></tr></tbody></table></div>
<br>
<br>
When the program starts the user is prompted to insert a starting number for the countdown. Then the <tt>while</tt> loop begins, if the value entered by the user fulfills the condition <tt>n&gt;0</tt> (that <tt>n</tt> is greater than zero) the block that follows the condition will be executed and repeated while the condition (<tt>n&gt;0</tt>) remains being true.<br>
<br>
The whole process of the previous program can be interpreted according to the following script (beginning in main):<br>
<br>
<ol>
<li>User assigns a value to <tt>n</tt></li>
<li>The while condition is checked (<tt>n&gt;0</tt>). At this point there are two possibilities:<br>
	* condition is true: statement is executed (to step 3)<br>
	* condition is false: ignore statement and continue after it (to step 5)</li>
<li>Execute statement:<br>
<tt>cout &lt;&lt; n &lt;&lt; ", ";<br>
--n;<br>
</tt>
(prints the value of <tt>n</tt> on the screen and decreases <tt>n</tt> by <tt>1</tt>)</li>
<li>End of block. Return automatically to step 2</li>
<li>Continue the program right after the block: print FIRE! and end program.</li>
</ol>
<br>
When creating a while-loop, we must always consider that it has to end
at some point, therefore we must provide within the block some method
to force the condition to become false at some point, otherwise the
loop will continue looping forever. In this case we have included <tt>--n;</tt> that decreases the value of the variable that is being evaluated in the condition (<tt>n</tt>) by one - this will eventually make the condition (<tt>n&gt;0</tt>) to become false after a certain number of loop iterations: to be more specific, when <tt>n</tt> becomes <tt>0</tt>, that is where our while-loop and our countdown end.<br>
<br>
Of course this is such a simple action for our computer that the whole
countdown is performed instantly without any practical delay between
numbers.<br>
<br>
<a name="do"></a><h4>The do-while loop</h4>
<br>
Its format is:<br>
<br>
<tt>
do statement while (condition);<br>
</tt>
<br>
Its functionality is exactly the same as the while loop, except that <tt>condition</tt> in the do-while loop is evaluated after the execution of statement instead of before, granting at least one execution of <tt>statement</tt> even if <tt>condition</tt> is never fulfilled. For example, the following example program echoes any number you enter until you enter <tt>0</tt>.<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></tt></td>
<td class="source"><pre><code><cite>// number echoer</cite>

<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>unsigned</var> <var>long</var> n;
  <var>do</var> {
    cout &lt;&lt; <kbd>"Enter number (0 to end): "</kbd>;
    cin &gt;&gt; n;
    cout &lt;&lt; <kbd>"You entered: "</kbd> &lt;&lt; n &lt;&lt; <kbd>"\n"</kbd>;
  } <var>while</var> (n != 0);
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>Enter number (0 to end): 12345
You entered: 12345
Enter number (0 to end): 160277
You entered: 160277
Enter number (0 to end): 0
You entered: 0</samp></pre></td></tr></tbody></table></div>
<br>
<br>
The do-while loop is usually used when the condition that has to determine the end of the loop is determined <strong>within</strong>
the loop statement itself, like in the previous case, where the user
input within the block is what is used to determine if the loop has to
end. In fact if you never enter the value <tt>0</tt> in the previous example you can be prompted for more numbers forever.<br>
<br>
<a name="for"></a><h4>The for loop</h4>
<br>
Its format is:<br>
<br>
<tt>
for (initialization; condition; increase) statement;<br>
</tt>
<br>
and its main function is to repeat <tt>statement</tt> while <tt>condition</tt> remains true, like the while loop. But in addition, the <tt>for</tt> loop provides specific locations to contain an <tt>initialization</tt> statement and an <tt>increase</tt>
statement. So this loop is specially designed to perform a repetitive
action with a counter which is initialized and increased on each
iteration.<br>
<br>
It works in the following way:<br>
<br>
<ol>
<li><tt>initialization</tt> is executed. Generally it is an initial value setting for a counter variable. This is executed only once.</li>
<li><tt>condition</tt> is checked. If it is true the loop continues, otherwise the loop ends and <tt>statement</tt> is skipped (not executed).</li>
<li><tt>statement</tt> is executed. As usual, it can be either a single statement or a block enclosed in braces <tt>{ }</tt>.</li>
<li>finally, whatever is specified in the <tt>increase</tt> field is executed and the loop gets back to step 2.</li>
</ol>
<br>
Here is an example of countdown using a for loop:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></tt></td>
<td class="source"><pre><code><cite>// countdown using a for loop</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;
<var>int</var> main ()
{
  <var>for</var> (<var>int</var> n=10; n&gt;0; n--) {
    cout &lt;&lt; n &lt;&lt; <kbd>", "</kbd>;
  }
  cout &lt;&lt; <kbd>"FIRE!\n"</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>10, 9, 8, 7, 6, 5, 4, 3, 2, 1, FIRE!</samp></pre></td></tr></tbody></table></div>
<br>
<br>
The <tt>initialization</tt> and <tt>increase</tt> fields are
optional. They can remain empty, but in all cases the semicolon signs
between them must be written. For example we could write: <tt>for (;n&lt;10;)</tt> if we wanted to specify no initialization and no increase; or <tt>for (;n&lt;10;n++)</tt> if we wanted to include an increase field but no initialization (maybe because the variable was already initialized before).<br>
<br>
Optionally, using the comma operator (<tt>,</tt>) we can specify more than one expression in any of the fields included in a <tt>for</tt> loop, like in <tt>initialization</tt>, for example. The comma operator (<tt>,</tt>)
is an expression separator, it serves to separate more than one
expression where only one is generally expected. For example, suppose
that we wanted to initialize more than one variable in our loop:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br></tt></td>
<td class="source"><pre><code><var>for</var> ( n=0, i=100 ; n!=i ; n++, i-- )
{
   <cite>// whatever here...</cite>
}</code></pre></td></tr></tbody></table></div>
<br>
<br>
This loop will execute for 50 times if neither <tt>n</tt> or <tt>i</tt> are modified within the loop:<br>
<br>
<img src="Control%20Structures%20-%20C++%20Documentation_files/for_loop.gif" alt="">
<br>
<tt>n</tt> starts with a value of <tt>0</tt>, and <tt>i</tt> with <tt>100</tt>, the condition is <tt>n!=i</tt> (that <tt>n</tt> is not equal to <tt>i</tt>). Because <tt>n</tt> is increased by one and <tt>i</tt> decreased by one, the loop's condition will become false after the 50th loop, when both <tt>n</tt> and <tt>i</tt> will be equal to <tt>50</tt>.<br>
<br>
<a name="jump_statements"></a><h3>Jump statements.</h3>
<br>
<a name="break"></a><h4>The break statement</h4>
<br>
Using <tt>break</tt> we can leave a loop even if the condition
for its end is not fulfilled. It can be used to end an infinite loop,
or to force it to end before its natural end. For example, we are going
to stop the count down before its natural end (maybe because of an
engine check failure?):<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></tt></td>
<td class="source"><pre><code><cite>// break loop example</cite>

<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> n;
  <var>for</var> (n=10; n&gt;0; n--)
  {
    cout &lt;&lt; n &lt;&lt; <kbd>", "</kbd>;
    <var>if</var> (n==3)
    {
      cout &lt;&lt; <kbd>"countdown aborted!"</kbd>;
      <var>break</var>;
    }
  }
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>10, 9, 8, 7, 6, 5, 4, 3, countdown aborted!</samp></pre></td></tr></tbody></table></div>
<br>
<br>
<a name="continue"></a><h4>The continue statement</h4>
<br>
The <tt>continue</tt> statement causes the program to skip the
rest of the loop in the current iteration as if the end of the
statement block had been reached, causing it to jump to the start of
the following iteration. For example, we are going to skip the number 5
in our countdown:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></tt></td>
<td class="source"><pre><code><cite>// continue loop example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>for</var> (<var>int</var> n=10; n&gt;0; n--) {
    <var>if</var> (n==5) <var>continue</var>;
    cout &lt;&lt; n &lt;&lt; <kbd>", "</kbd>;
  }
  cout &lt;&lt; <kbd>"FIRE!\n"</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>10, 9, 8, 7, 6, 4, 3, 2, 1, FIRE!</samp></pre></td></tr></tbody></table></div>
<br>
<br>
<a name="goto"></a><h4>The goto statement</h4>
<tt>goto</tt> allows to make an absolute jump to another point in the
program. You should use this feature with caution since its execution
causes an unconditional jump ignoring any type of nesting limitations.<br>
The destination point is identified by a label, which is then used as
an argument for the goto statement. A label is made of a valid
identifier followed by a colon (<tt>:</tt>).<br>
<br>
Generally speaking, this instruction has no concrete use in structured
or object oriented programming aside from those that low-level
programming fans may find for it. For example, here is our countdown
loop using <tt>goto</tt>:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></tt></td>
<td class="source"><pre><code><cite>// goto loop example</cite>

<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> n=10;
  loop:
  cout &lt;&lt; n &lt;&lt; <kbd>", "</kbd>;
  n--;
  <var>if</var> (n&gt;0) <var>goto</var> loop;
  cout &lt;&lt; <kbd>"FIRE!\n"</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>10, 9, 8, 7, 6, 5, 4, 3, 2, 1, FIRE!</samp></pre></td></tr></tbody></table></div>
<br>
<br>
<a name="exit"></a><h4>The exit function</h4>
<br>
<tt>exit</tt> is a function defined in the <tt>cstdlib</tt> library.<br>
<br>
The purpose of <tt>exit</tt> is to terminate the current program with a specific exit code. Its prototype is:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code><var>void</var> exit (<var>int</var> exitcode);</code></pre></td></tr></tbody></table></div>
<br>
<br>
The <tt>exitcode</tt> is used by some operating systems and may be used by calling programs. By convention, an exit code of <tt>0</tt> means that the program finished normally and any other value means that some error or unexpected results happened.<br>
<br>
<a name="switch"></a><h3>The selective structure: switch.</h3>
The syntax of the switch statement is a bit peculiar. Its objective is
to check several possible constant values for an expression. Something
similar to what we did at the beginning of this section with the
concatenation of several <tt>if</tt> and <tt>else if</tt> instructions. Its form is the following:<br>
<br>
<pre>switch (expression)
{
  case constant1:
     group of statements 1;
     break;
  case constant2:
     group of statements 2;
     break;
  .
  .
  .
  default:
     default group of statements
}
</pre>
<br>
It works in the following way: switch evaluates <tt>expression</tt> and checks if it is equivalent to <tt>constant1</tt>, if it is, it executes <tt>group of statements 1</tt> until it finds the <tt>break</tt> statement. When it finds this <tt>break</tt> statement the program jumps to the end of the <tt>switch</tt> selective structure.<br>
<br>
If expression was not equal to <tt>constant1</tt> it will be checked against <tt>constant2</tt>. If it is equal to this, it will execute <tt>group of statements 2</tt> until a break keyword is found, and then will jump to the end of the <tt>switch</tt> selective structure.<br>
<br>
Finally, if the value of <tt>expression</tt> did not match any of the previously specified constants (you can include as many <tt>case</tt> labels as values you want to check), the program will execute the statements included after the <tt>default:</tt> label, if it exists (since it is optional).<br>
<br>
Both of the following code fragments have the same behavior:<br>
<br>
<table class="boxed">
<tbody><tr><th>switch example</th><th>if-else equivalent</th></tr>
<tr><td><pre>switch (x) {
  case 1:
    cout &lt;&lt; "x is 1";
    break;
  case 2:
    cout &lt;&lt; "x is 2";
    break;
  default:
    cout &lt;&lt; "value of x unknown";
  }
</pre></td><td><pre>if (x == 1) {
  cout &lt;&lt; "x is 1";
  }
else if (x == 2) {
  cout &lt;&lt; "x is 2";
  }
else {
  cout &lt;&lt; "value of x unknown";
  }
</pre></td></tr></tbody></table>
<br>
The <tt>switch</tt> statement is a bit peculiar within the C++ language because it uses labels instead of blocks. This forces us to put <tt>break</tt>
statements after the group of statements that we want to be executed
for a specific condition. Otherwise the remainder statements -including
those corresponding to other labels- will also be executed until the
end of the <tt>switch</tt> selective block or a <tt>break</tt> statement is reached.<br>
<br>
For example, if we did not include a <tt>break</tt> statement after the first group for case one, the program will not automatically jump to the end of the <tt>switch</tt> selective block and it would continue executing the rest of statements until it reaches either a <tt>break</tt> instruction or the end of the <tt>switch</tt> selective block. This makes it unnecessary to include braces <tt>{ }</tt>
surrounding the statements for each of the cases, and it can also be
useful to execute the same block of instructions for different possible
values for the expression being evaluated. For example: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></tt></td>
<td class="source"><pre><code><var>switch</var> (x) {
  <var>case</var> 1:
  <var>case</var> 2:
  <var>case</var> 3:
    cout &lt;&lt; <kbd>"x is 1, 2 or 3"</kbd>;
    <var>break</var>;
  <var>default</var>:
    cout &lt;&lt; <kbd>"x is not 1, 2 nor 3"</kbd>;
  }</code></pre></td></tr></tbody></table></div>
<br>
<br>
Notice that switch can only be used to compare an expression against
constants. Therefore we cannot put variables as labels (for example <tt>case n:</tt> where <tt>n</tt> is a variable) or ranges (<tt>case (1..3):</tt>) because they are not valid C++ constants.<br>
<br>
If you need to check ranges or values that are not constants, use a concatenation of <tt>if</tt> and <tt>else if</tt> statements.<br>
<table class="C_docPrevNext"><tbody><tr><td class="prev"><a href="http://www.cplusplus.com/doc/tutorial/basic_io/" rel="prev"><img src="Control%20Structures%20-%20C++%20Documentation_files/navigate_previous.gif" alt="Previous">Previous:<br><b>Basic Input/Output</b></a></td><td class="index"><a href="http://www.cplusplus.com/doc/tutorial/" rel="index"><img src="Control%20Structures%20-%20C++%20Documentation_files/navigate_index.gif" alt="Index">Index</a></td><td class="next"><a href="http://www.cplusplus.com/doc/tutorial/functions/" rel="next"><img src="Control%20Structures%20-%20C++%20Documentation_files/navigate_next.gif" alt="Next">Next:<br><b>Functions (I)</b></a></td></tr></tbody></table><div id="CH_bb"></div><script type="text/javascript">new doc_Page('CH_bb','/doc/item.cgi',6,0,0,32768);</script>
<p>

<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Control%20Structures%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_2_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_2" name="aswift_2" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins>
</p></td></tr></tbody></table>
</div>
<div id="CH_footer">
	<a href="http://www.cplusplus.com/">Home page</a> | <a href="http://www.cplusplus.com/privacy.do">Privacy policy</a><br>© cplusplus.com, 2000-2011 - All rights reserved - <i>v2.9</i><br><a href="http://www.cplusplus.com/contact.do?referrer=http%3A%2F%2Fwww.cplusplus.com%2Fdoc%2Ftutorial%2Fcontrol%2F">Spotted an error? contact us</a>
</div>

<script src="Control%20Structures%20-%20C++%20Documentation_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
onPrint.print();
var gso = new Session ('ssn29','rel29',14400,86400,1313153955);
_uacct = "UA-521783-1";
urchinTracker();
</script>
</body></html>