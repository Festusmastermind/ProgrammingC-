<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>


<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Dynamic Memory - C++ Documentation</title>
<style type="text/css">.hierarchy DIV {width:100px; height:24px; text-align:center; padding-top:8px; border:black 1px solid} </style>
<link rel="shortcut icon" type="image/x-icon" href="http://www.cplusplus.com/favicon.ico">
<link rel="stylesheet" type="text/css" href="Dynamic%20Memory%20-%20C++%20Documentation_files/main29f.css">
<script src="Dynamic%20Memory%20-%20C++%20Documentation_files/main29f.js" type="text/javascript"></script>
<script type="text/javascript">
new LoginBox('CH_boxLogin',1);</script>
</head><body>
<div id="CH_header">
	<a href="http://www.cplusplus.com/"><img src="Dynamic%20Memory%20-%20C++%20Documentation_files/cpp-logo.png" alt="cplusplus.com" width="198" height="75"></a>
	<div id="CH_bar">
		<b><a href="http://www.cplusplus.com/">C++</a> : <a href="http://www.cplusplus.com/doc/">Documentation</a> : <a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a> : Dynamic Memory</b>
	</div>
	
	<div id="CH_searchbox">
		<form id="search" action="/search.do" method="get">
		Search: <input name="q" size="13" class="txt"> <input value="Search" class="btn" type="submit">
		</form>
	</div>
	<div id="CH_boxLogin"><div class="C_LoginBox"><form style="display: block;" name="CH_frmLogin" id="CH_frmLogin" action="/user/access.cgi" onsubmit="elCH_boxLogin.send(); return false;" method="post"><table><tbody><tr><td></td><td class="right"><b>login:</b></td><td><input name="w" value="login" type="hidden"><input name="y" value="1" type="hidden"><input name="to" value="http://www.cplusplus.com/doc/tutorial/dynamic/" type="hidden"><input class="txt" name="l" size="4" title="Type user name" type="text"></td><td><input class="txt" name="p" size="4" title="Type password" type="password"></td><td><input class="btn" value="sign in" type="submit"></td></tr><tr><td>sign in using:<a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=google&amp;to=%2Fdoc%2Ftutorial%2Fdynamic%2F" title="Sign in using your google account"><img src="Dynamic%20Memory%20-%20C++%20Documentation_files/16google.png" width="16" height="16"></a><a href="http://www.cplusplus.com/user/access.cgi?w=login&amp;y=1&amp;pr=yahoo&amp;to=%2Fdoc%2Ftutorial%2Fdynamic%2F" title="Sign in using your Yahoo! account"><img src="Dynamic%20Memory%20-%20C++%20Documentation_files/16yahoo.png" width="16" height="16"></a></td><td colspan="4" class="right"><label for="rememberme">remember me<input class="chk" name="rememberme" id="rememberme" value="1" type="checkbox"> &nbsp; [<a href="http://www.cplusplus.com/user/access.cgi?w=signup">register</a>]</label></td></tr></tbody></table></form><div id="CH_insLogin"></div></div></div>
</div>
<div id="CH_container">
<table id="CH_containertbl"><tbody><tr>
<td id="CH_nav">
<table class="box">
<thead>
<tr><th><a href="http://www.cplusplus.com/">cplusplus.com</a></th></tr>
</thead>
<tbody>
<tr><td class="folder"><a href="http://www.cplusplus.com/info/">Information</a></td></tr>
<tr><td class="folder selected"><a href="http://www.cplusplus.com/doc/">Documentation</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/reference/">Reference</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/articles/">Articles</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/forum/">Forum</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/">Documentation</a></th></tr></thead>
<tbody><tr><td class="selected folder"><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/ascii/">Ascii Codes</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/boolean/">Boolean Operations</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/hex/">Numerical Bases</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></th></tr></thead>
<tbody><tr><td class="folder">Introduction:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/introduction/">Instructions for use</a></td></tr>
<tr><td class="folder">Basics of C++:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/program_structure/">Structure of a program</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/variables/">Variables. Data Types.</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/constants/">Constants</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/operators/">Operators</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/basic_io/">Basic Input/Output</a></td></tr>
<tr><td class="folder">Control Structures:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/control/">Control Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions/">Functions (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions2/">Functions (II)</a></td></tr>
<tr><td class="folder">Compound Data Types:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/arrays/">Arrays</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/ntcs/">Character Sequences</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/pointers/">Pointers</a></td></tr>
<tr><td class="selected indent"><a href="http://www.cplusplus.com/doc/tutorial/dynamic/">Dynamic Memory</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/structures/">Data Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/other_data_types/">Other Data Types</a></td></tr>
<tr><td class="folder">Object Oriented Programming:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes/">Classes (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes2/">Classes (II)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/inheritance/">Friendship and inheritance</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/polymorphism/">Polymorphism</a></td></tr>
<tr><td class="folder">Advanced Concepts:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/templates/">Templates</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/namespaces/">Namespaces</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/exceptions/">Exceptions</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/typecasting/">Type Casting</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/preprocessor/">Preprocessor directives</a></td></tr>
<tr><td class="folder">C++ Standard Library:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/files/">Input/Output with files</a></td></tr>
</tbody>
</table>
<div id="CH_subnav"></div>
<br>
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
/* single square */
google_ad_slot = "7465536459";
google_ad_width = 125;
google_ad_height = 125;
//-->
</script>
<script type="text/javascript" src="Dynamic%20Memory%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 125px; position: relative; visibility: visible; width: 125px;"><ins id="aswift_0_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 125px; position: relative; visibility: visible; width: 125px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_0" name="aswift_0" style="left: 0pt; position: absolute; top: 0pt;" width="125" frameborder="0" height="125" scrolling="no"></iframe></ins></ins>
	</td>
	<td id="CH_main">
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Dynamic%20Memory%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_1_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_1" name="aswift_1" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins><br><div class="C_doctop">
<h1>Dynamic Memory</h1>
<div class="right"></div>
</div>
<div class="docsubtop">
<div class="right"></div>
<div class="prototype"></div>
</div>
Until now, in all our programs, we have only had as much memory
available as we declared for our variables, having the size of all of
them to be determined in the source code, before the execution of the
program. But, what if we need a variable amount of memory that can only
be determined during runtime? For example, in the case that we need
some user input to determine the necessary amount of memory space.<br>
<br>
The answer is <i>dynamic memory</i>, for which C++ integrates the operators <tt>new</tt> and <tt>delete</tt>.<br>
<br>
<a name="new"></a><h3>Operators new and new[]</h3>
In order to request dynamic memory we use the operator <tt>new</tt>. <tt>new</tt>
is followed by a data type specifier and -if a sequence of more than
one element is required- the number of these within brackets <tt>[]</tt>. It returns a pointer to the beginning of the new block of memory allocated. Its form is: <br>
<br>
<tt>
pointer = new type<br>
pointer = new type [number_of_elements]<br>
</tt>
<br>
The first expression is used to allocate memory to contain one single element of type <tt>type</tt>. The second one is used to assign a block (an array) of elements of type <tt>type</tt>, where <tt>number_of_elements</tt> is an integer value representing the amount of these. For example:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><var>int</var> * bobby;
bobby = <var>new</var> <var>int</var> [5];</code></pre></td></tr></tbody></table></div>
<br>
<br>
In this case, the system dynamically assigns space for five elements of type <tt>int</tt> and returns a pointer to the first element of the sequence, which is assigned to <tt>bobby</tt>. Therefore, now, <tt>bobby</tt> points to a valid block of memory with space for five elements of type <tt>int</tt>.<br>
<br>
<img src="Dynamic%20Memory%20-%20C++%20Documentation_files/dynamic.gif" alt=""> <br>
<br>
The first element pointed by bobby can be accessed either with the expression <tt>bobby[0]</tt> or the expression <tt>*bobby</tt>. Both are equivalent as has been explained in the section about pointers. The second element can be accessed either with <tt>bobby[1]</tt> or <tt>*(bobby+1)</tt> and so on...<br>
<br>
You could be wondering the difference between declaring a normal array
and assigning dynamic memory to a pointer, as we have just done. The
most important difference is that the size of an array has to be a
constant value, which limits its size to what we decide at the moment
of designing the program, before its execution, whereas the dynamic
memory allocation allows us to assign memory during the execution of
the program (runtime) using any variable or constant value as its size.<br>
<br>
The dynamic memory requested by our program is allocated by the system
from the memory heap. However, computer memory is a limited resource,
and it can be exhausted. Therefore, it is important to have some
mechanism to check if our request to allocate memory was successful or
not.<br>
<br>
C++ provides two standard methods to check if the allocation was successful:<br>
<br>
One is by handling exceptions. Using this method an exception of type <tt>bad_alloc</tt>
is thrown when the allocation fails. Exceptions are a powerful C++
feature explained later in these tutorials. But for now you should know
that if this exception is thrown and it is not handled by a specific
handler, the program execution is terminated.<br>
<br>
This exception method is the default method used by new, and is the one used in a declaration like:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>bobby = <var>new</var> <var>int</var> [5];  <cite>// if it fails an exception is thrown </cite></code></pre></td></tr></tbody></table></div>
<br>
<br>
The other method is known as <tt>nothrow</tt>, and what happens when it is used is that when a memory allocation fails, instead of throwing a <tt>bad_alloc</tt> exception or terminating the program, the pointer returned by <tt>new</tt> is a null pointer, and the program continues its execution.<br>
<br>
This method can be specified by using a special object called <tt>nothrow</tt>, declared in header <tt>&lt;new&gt;</tt>, as argument for <tt>new</tt>:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>bobby = <var>new</var> (nothrow) <var>int</var> [5]; </code></pre></td></tr></tbody></table></div>
<br>
<br>
In this case, if the allocation of this block of memory failed, the failure could be detected by checking if <tt>bobby</tt> took a null pointer value:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br></tt></td>
<td class="source"><pre><code><var>int</var> * bobby;
bobby = <var>new</var> (nothrow) <var>int</var> [5];
<var>if</var> (bobby == 0) {
  <cite>// error assigning memory. Take measures.</cite>
  }; </code></pre></td></tr></tbody></table></div>
<br>
<br>
This <tt>nothrow</tt> method requires more work than the
exception method, since the value returned has to be checked after each
and every memory allocation, but I will use it in our examples due to
its simplicity. Anyway this method can become tedious for larger
projects, where the exception method is generally preferred. The
exception method will be explained in detail later in this tutorial.<br>
<br>
<h3>Operators delete and delete[]</h3>
Since the necessity of dynamic memory is usually limited to specific
moments within a program, once it is no longer needed it should be
freed so that the memory becomes available again for other requests of
dynamic memory. This is the purpose of the operator <tt>delete</tt>, whose format is:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br></tt></td>
<td class="source"><pre><code><var>delete</var> pointer;
<var>delete</var> [] pointer;</code></pre></td></tr></tbody></table></div>
<br>
<br>
The first expression should be used to delete memory allocated for a
single element, and the second one for memory allocated for arrays of
elements. <br>
<br>
The value passed as argument to delete must be either a pointer to a memory block previously allocated with <tt>new</tt>, or a null pointer (in the case of a null pointer, <tt>delete</tt> produces no effect).<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br></tt></td>
<td class="source"><pre><code><cite>// rememb-o-matic</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;new&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> i,n;
  <var>int</var> * p;
  cout &lt;&lt; <kbd>"How many numbers would you like to type? "</kbd>;
  cin &gt;&gt; i;
  p= <var>new</var> (nothrow) <var>int</var>[i];
  <var>if</var> (p == 0)
    cout &lt;&lt; <kbd>"Error: memory could not be allocated"</kbd>;
  <var>else</var>
  {
    <var>for</var> (n=0; n&lt;i; n++)
    {
      cout &lt;&lt; <kbd>"Enter number: "</kbd>;
      cin &gt;&gt; p[n];
    }
    cout &lt;&lt; <kbd>"You have entered: "</kbd>;
    <var>for</var> (n=0; n&lt;i; n++)
      cout &lt;&lt; p[n] &lt;&lt; <kbd>", "</kbd>;
    <var>delete</var>[] p;
  }
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>How many numbers would you like to type? 5
Enter number : 75
Enter number : 436
Enter number : 1067
Enter number : 8
Enter number : 32
You have entered: 75, 436, 1067, 8, 32,</samp></pre></td></tr></tbody></table></div>
<br>
<br>
Notice how the value within brackets in the <tt>new</tt> statement is a variable value entered by the user (<tt>i</tt>), not a constant value:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>p= <var>new</var> (nothrow) <var>int</var>[i];</code></pre></td></tr></tbody></table></div>
<br>
<br>
But the user could have entered a value for i so big that our system
could not handle it. For example, when I tried to give a value of 1
billion to the "How many numbers" question, my system could not
allocate that much memory for the program and I got the text message we
prepared for this case (<tt>Error: memory could not be allocated</tt>).
Remember that in the case that we tried to allocate the memory without
specifying the nothrow parameter in the new expression, an exception
would be thrown, which if it's not handled terminates the program.<br>
<br>
It is a good practice to always check if a dynamic memory block was successfully allocated. Therefore, if you use the <tt>nothrow</tt>
method, you should always check the value of the pointer returned.
Otherwise, use the exception method, even if you do not handle the
exception. This way, the program will terminate at that point without
causing the unexpected results of continuing executing a code that
assumes a block of memory to have been allocated when in fact it has
not.<br>
<br>
<h3>Dynamic memory in ANSI-C</h3>
<br>
Operators <tt>new</tt> and <tt>delete</tt> are exclusive of C++.
They are not available in the C language. But using pure C language and
its library, dynamic memory can also be used through the functions <a href="http://www.cplusplus.com/malloc">malloc</a>, <a href="http://www.cplusplus.com/calloc">calloc</a>, <a href="http://www.cplusplus.com/realloc">realloc</a> and <a href="http://www.cplusplus.com/free">free</a>, which are also available in C++ including the <tt>&lt;cstdlib&gt;</tt> header file (see <a href="http://www.cplusplus.com/cstdlib">cstdlib</a> for more info).<br>
<br>
The memory blocks allocated by these functions are not necessarily
compatible with those returned by new, so each one should be
manipulated with its own set of functions or operators.<br>
<table class="C_docPrevNext"><tbody><tr><td class="prev"><a href="http://www.cplusplus.com/doc/tutorial/pointers/" rel="prev"><img src="Dynamic%20Memory%20-%20C++%20Documentation_files/navigate_previous.gif" alt="Previous">Previous:<br><b>Pointers</b></a></td><td class="index"><a href="http://www.cplusplus.com/doc/tutorial/" rel="index"><img src="Dynamic%20Memory%20-%20C++%20Documentation_files/navigate_index.gif" alt="Index">Index</a></td><td class="next"><a href="http://www.cplusplus.com/doc/tutorial/structures/" rel="next"><img src="Dynamic%20Memory%20-%20C++%20Documentation_files/navigate_next.gif" alt="Next">Next:<br><b>Data Structures</b></a></td></tr></tbody></table><div id="CH_bb"></div><script type="text/javascript">new doc_Page('CH_bb','/doc/item.cgi',12,0,0,32768);</script>
<p>

<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Dynamic%20Memory%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_2_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_2" name="aswift_2" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins>
</p></td></tr></tbody></table>
</div>
<div id="CH_footer">
	<a href="http://www.cplusplus.com/">Home page</a> | <a href="http://www.cplusplus.com/privacy.do">Privacy policy</a><br>© cplusplus.com, 2000-2011 - All rights reserved - <i>v2.9</i><br><a href="http://www.cplusplus.com/contact.do?referrer=http%3A%2F%2Fwww.cplusplus.com%2Fdoc%2Ftutorial%2Fdynamic%2F">Spotted an error? contact us</a>
</div>

<script src="Dynamic%20Memory%20-%20C++%20Documentation_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
onPrint.print();
var gso = new Session ('ssn29','rel29',14400,86400,1313153545);
_uacct = "UA-521783-1";
urchinTracker();
</script>
</body></html>