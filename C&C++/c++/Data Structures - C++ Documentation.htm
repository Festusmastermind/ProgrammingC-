<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>


<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Data Structures - C++ Documentation</title>
<style type="text/css">.hierarchy DIV {width:100px; height:24px; text-align:center; padding-top:8px; border:black 1px solid} </style>
<link rel="shortcut icon" type="image/x-icon" href="http://www.cplusplus.com/favicon.ico">
<link rel="stylesheet" type="text/css" href="Data%20Structures%20-%20C++%20Documentation_files/main29f.css">
<script src="Data%20Structures%20-%20C++%20Documentation_files/main29f.js" type="text/javascript"></script>
<script type="text/javascript">
new LoginBox('CH_boxLogin',1);</script>
</head><body>
<div id="CH_header">
	<a href="http://www.cplusplus.com/"><img src="Data%20Structures%20-%20C++%20Documentation_files/cpp-logo.png" alt="cplusplus.com" width="198" height="75"></a>
	<div id="CH_bar">
		<b><a href="http://www.cplusplus.com/">C++</a> : <a href="http://www.cplusplus.com/doc/">Documentation</a> : <a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a> : Data Structures</b>
	</div>
	
	<div id="CH_searchbox">
		<form id="search" action="/search.do" method="get">
		Search: <input name="q" size="13" class="txt"> <input value="Search" class="btn" type="submit">
		</form>
	</div>
	<div id="CH_boxLogin"><div class="loginmessage">&nbsp;<img src="Data%20Structures%20-%20C++%20Documentation_files/waitblue.gif"></div>
	</div>
</div>
<div id="CH_container">
<table id="CH_containertbl"><tbody><tr>
<td id="CH_nav">
<table class="box">
<thead>
<tr><th><a href="http://www.cplusplus.com/">cplusplus.com</a></th></tr>
</thead>
<tbody>
<tr><td class="folder"><a href="http://www.cplusplus.com/info/">Information</a></td></tr>
<tr><td class="folder selected"><a href="http://www.cplusplus.com/doc/">Documentation</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/reference/">Reference</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/articles/">Articles</a></td></tr>
<tr><td class="folder"><a href="http://www.cplusplus.com/forum/">Forum</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/">Documentation</a></th></tr></thead>
<tbody><tr><td class="selected folder"><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/ascii/">Ascii Codes</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/boolean/">Boolean Operations</a></td></tr>
<tr><td><a href="http://www.cplusplus.com/doc/hex/">Numerical Bases</a></td></tr>
</tbody>
</table>
<table class="box">
<thead><tr><th><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorial</a></th></tr></thead>
<tbody><tr><td class="folder">Introduction:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/introduction/">Instructions for use</a></td></tr>
<tr><td class="folder">Basics of C++:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/program_structure/">Structure of a program</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/variables/">Variables. Data Types.</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/constants/">Constants</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/operators/">Operators</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/basic_io/">Basic Input/Output</a></td></tr>
<tr><td class="folder">Control Structures:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/control/">Control Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions/">Functions (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/functions2/">Functions (II)</a></td></tr>
<tr><td class="folder">Compound Data Types:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/arrays/">Arrays</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/ntcs/">Character Sequences</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/pointers/">Pointers</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/dynamic/">Dynamic Memory</a></td></tr>
<tr><td class="selected indent"><a href="http://www.cplusplus.com/doc/tutorial/structures/">Data Structures</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/other_data_types/">Other Data Types</a></td></tr>
<tr><td class="folder">Object Oriented Programming:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes/">Classes (I)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/classes2/">Classes (II)</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/inheritance/">Friendship and inheritance</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/polymorphism/">Polymorphism</a></td></tr>
<tr><td class="folder">Advanced Concepts:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/templates/">Templates</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/namespaces/">Namespaces</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/exceptions/">Exceptions</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/typecasting/">Type Casting</a></td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/preprocessor/">Preprocessor directives</a></td></tr>
<tr><td class="folder">C++ Standard Library:</td></tr>
<tr><td class="indent"><a href="http://www.cplusplus.com/doc/tutorial/files/">Input/Output with files</a></td></tr>
</tbody>
</table>
<div id="CH_subnav"></div>
<br>
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
/* single square */
google_ad_slot = "7465536459";
google_ad_width = 125;
google_ad_height = 125;
//-->
</script>
<script type="text/javascript" src="Data%20Structures%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 125px; position: relative; visibility: visible; width: 125px;"><ins id="aswift_0_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 125px; position: relative; visibility: visible; width: 125px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_0" name="aswift_0" style="left: 0pt; position: absolute; top: 0pt;" width="125" frameborder="0" height="125" scrolling="no"></iframe></ins></ins>
	</td>
	<td id="CH_main">
<script type="text/javascript"><!--
google_ad_client = "pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Data%20Structures%20-%20C++%20Documentation_files/show_ads.js">
</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins id="aswift_1_anchor" style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_1" name="aswift_1" style="left: 0pt; position: absolute; top: 0pt;" width="728" frameborder="0" height="90" scrolling="no"></iframe></ins></ins><br><div class="C_doctop">
<h1>Data Structures</h1>
<div class="right"></div>
</div>
<div class="docsubtop">
<div class="right"></div>
<div class="prototype"></div>
</div>
We have already learned how groups of sequential data can be used in
C++. But this is somewhat restrictive, since in many occasions what we
want to store are not mere sequences of elements all of the same data
type, but sets of different elements with different data types.<br>
<br>
<a name="struct"></a><h3>Data structures</h3>
A data structure is a group of data elements grouped together under one name. These data elements, known as <i>members</i>, can have different types and different lengths. Data structures are declared in C++ using the following syntax:<br>
<br>
struct structure_name {<br>
  member_type1 member_name1;<br>
  member_type2 member_name2;<br>
  member_type3 member_name3;<br>
  .<br>
  .<br>
} object_names;<br>
<br>
where <tt>structure_name</tt> is a name for the structure type, <tt>object_name</tt> can be a set of valid identifiers for objects that have the type of this structure. Within braces <tt>{ }</tt> there is a list with the data members, each one is specified with a type and a valid identifier as its name.<br>
<br>
The first thing we have to know is that a data structure creates a new
type: Once a data structure is declared, a new type with the identifier
specified as <tt>structure_name</tt> is created and can be used in the rest of the program as if it was any other type. For example:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br></tt></td>
<td class="source"><pre><code><var>struct</var> product {
  <var>int</var> weight;
  <var>float</var> price;
} ;

product apple;
product banana, melon;</code></pre></td></tr></tbody></table></div>
<br>
<br>
We have first declared a structure type called <tt>product</tt> with two members: <tt>weight</tt> and <tt>price</tt>, each of a different fundamental type. We have then used this name of the structure type (<tt>product</tt>) to declare three objects of that type: <tt>apple</tt>, <tt>banana</tt> and <tt>melon</tt> as we would have done with any fundamental data type.<br>
<br>
Once declared, <tt>product</tt> has become a new valid type name like the fundamental ones <tt>int</tt>, <tt>char</tt> or <tt>short</tt> and from that point on we are able to declare objects (variables) of this compound new type, like we have done with <tt>apple</tt>, <tt>banana</tt> and <tt>melon</tt>.<br>
<br>
Right at the end of the <tt>struct</tt> declaration, and before the ending semicolon, we can use the optional field <tt>object_name</tt> to directly declare objects of the structure type. For example, we can also declare the structure objects <tt>apple</tt>, <tt>banana</tt> and <tt>melon</tt> at the moment we define the data structure type this way: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br></tt></td>
<td class="source"><pre><code><var>struct</var> product {
  <var>int</var> weight;
  <var>float</var> price;
} apple, banana, melon;</code></pre></td></tr></tbody></table></div>
<br>
<br>
It is important to clearly differentiate between what is the structure
type name, and what is an object (variable) that has this structure
type. We can instantiate many objects (i.e. variables, like <tt>apple</tt>, <tt>banana</tt> and <tt>melon</tt>) from a single structure type (<tt>product</tt>).<br>
<br>
Once we have declared our three objects of a determined structure type (<tt>apple</tt>, <tt>banana</tt> and <tt>melon</tt>) we can operate directly with their members. To do that we use a dot (<tt>.</tt>)
inserted between the object name and the member name. For example, we
could operate with any of these elements as if they were standard
variables of their respective types: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br></tt></td>
<td class="source"><pre><code>apple.weight
apple.price
banana.weight
banana.price
melon.weight
melon.price</code></pre></td></tr></tbody></table></div>
<br>
<br>
Each one of these has the data type corresponding to the member they refer to: <tt>apple.weight</tt>, <tt>banana.weight</tt> and <tt>melon.weight</tt> are of type <tt>int</tt>, while <tt>apple.price</tt>, <tt>banana.price</tt> and <tt>melon.price</tt> are of type <tt>float</tt>.<br>
<br>
Let's see a real example where you can see how a structure type can be used in the same way as fundamental types:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br></tt></td>
<td class="source"><pre><code><cite>// example about structures</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;sstream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>struct</var> movies_t {
  string title;
  <var>int</var> year;
} mine, yours;

<var>void</var> printmovie (movies_t movie);

<var>int</var> main ()
{
  string mystr;

  mine.title = <kbd>"2001 A Space Odyssey"</kbd>;
  mine.year = 1968;

  cout &lt;&lt; <kbd>"Enter title: "</kbd>;
  getline (cin,yours.title);
  cout &lt;&lt; <kbd>"Enter year: "</kbd>;
  getline (cin,mystr);
  stringstream(mystr) &gt;&gt; yours.year;

  cout &lt;&lt; <kbd>"My favorite movie is:\n "</kbd>;
  printmovie (mine);
  cout &lt;&lt; <kbd>"And yours is:\n "</kbd>;
  printmovie (yours);
  <var>return</var> 0;
}

<var>void</var> printmovie (movies_t movie)
{
  cout &lt;&lt; movie.title;
  cout &lt;&lt; <kbd>" ("</kbd> &lt;&lt; movie.year &lt;&lt; <kbd>")\n"</kbd>;
}</code></pre></td>
<td class="output"><pre><samp>Enter title: Alien
Enter year: 1979

My favorite movie is:
 2001 A Space Odyssey (1968)
And yours is:
 Alien (1979)</samp></pre></td></tr></tbody></table></div>
<br>
<br>
The example shows how we can use the members of an object as regular variables. For example, the member <tt>yours.year</tt> is a valid variable of type <tt>int</tt>, and <tt>mine.title</tt> is a valid variable of type <tt>string</tt>.<br>
<br>
The objects <tt>mine</tt> and <tt>yours</tt> can also be treated as valid variables of type <tt>movies_t</tt>, for example we have passed them to the function <tt>printmovie</tt>
as we would have done with regular variables. Therefore, one of the
most important advantages of data structures is that we can either
refer to their members individually or to the entire structure as a
block with only one identifier.<br>
<br>
Data structures are a feature that can be used to represent databases,
especially if we consider the possibility of building arrays of them:<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br></tt></td>
<td class="source"><pre><code><cite>// array of structures</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;sstream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<dfn>#define N_MOVIES 3</dfn>

<var>struct</var> movies_t {
  string title;
  <var>int</var> year;
} films [N_MOVIES];

<var>void</var> printmovie (movies_t movie);

<var>int</var> main ()
{
  string mystr;
  <var>int</var> n;

  <var>for</var> (n=0; n&lt;N_MOVIES; n++)
  {
    cout &lt;&lt; <kbd>"Enter title: "</kbd>;
    getline (cin,films[n].title);
    cout &lt;&lt; <kbd>"Enter year: "</kbd>;
    getline (cin,mystr);
    stringstream(mystr) &gt;&gt; films[n].year;
  }

  cout &lt;&lt; <kbd>"\nYou have entered these movies:\n"</kbd>;
  <var>for</var> (n=0; n&lt;N_MOVIES; n++)
    printmovie (films[n]);
  <var>return</var> 0;
}

<var>void</var> printmovie (movies_t movie)
{
  cout &lt;&lt; movie.title;
  cout &lt;&lt; <kbd>" ("</kbd> &lt;&lt; movie.year &lt;&lt; <kbd>")\n"</kbd>;
}</code></pre></td>
<td class="output"><pre><samp>Enter title: Blade Runner
Enter year: 1982
Enter title: Matrix
Enter year: 1999
Enter title: Taxi Driver
Enter year: 1976
 
You have entered these movies:
Blade Runner (1982)
Matrix (1999)
Taxi Driver (1976)</samp></pre></td></tr></tbody></table></div>
<br>
<br>
<a name="arrow"></a><h3>Pointers to structures</h3>
Like any other type, structures can be pointed by its own type of pointers:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br></tt></td>
<td class="source"><pre><code><var>struct</var> movies_t {
  string title;
  <var>int</var> year;
};

movies_t amovie;
movies_t * pmovie;</code></pre></td></tr></tbody></table></div>
<br>
<br>
Here <tt>amovie</tt> is an object of structure type <tt>movies_t</tt>, and <tt>pmovie</tt> is a pointer to point to objects of structure type <tt>movies_t</tt>. So, the following code would also be valid:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>pmovie = &amp;amovie;</code></pre></td></tr></tbody></table></div>
<br>
<br>
The value of the pointer <tt>pmovie</tt> would be assigned to a reference to the object <tt>amovie</tt> (its memory address).<br>
<br>
We will now go with another example that includes pointers, which will serve to introduce a new operator: the arrow operator (<tt>-&gt;</tt>):<br>
<br>
<div class="auto"><table class="split"><tbody><tr><td class="rownum"><tt>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br></tt></td>
<td class="source"><pre><code><cite>// pointers to structures</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;sstream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>struct</var> movies_t {
  string title;
  <var>int</var> year;
};

<var>int</var> main ()
{
  string mystr;

  movies_t amovie;
  movies_t * pmovie;
  pmovie = &amp;amovie;

  cout &lt;&lt; <kbd>"Enter title: "</kbd>;
  getline (cin, pmovie-&gt;title);
  cout &lt;&lt; <kbd>"Enter year: "</kbd>;
  getline (cin, mystr);
  (stringstream) mystr &gt;&gt; pmovie-&gt;year;

  cout &lt;&lt; <kbd>"\nYou have entered:\n"</kbd>;
  cout &lt;&lt; pmovie-&gt;title;
  cout &lt;&lt; <kbd>" ("</kbd> &lt;&lt; pmovie-&gt;year &lt;&lt; <kbd>")\n"</kbd>;

  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>Enter title: Invasion of the body snatchers
Enter year: 1978
 
You have entered:
Invasion of the body snatchers (1978)</samp></pre></td></tr></tbody></table></div>
<br>
<br>
The previous code includes an important introduction: the arrow operator (<tt>-&gt;</tt>).
This is a dereference operator that is used exclusively with pointers
to objects with members. This operator serves to access a member of an
object to which we have a reference. In the example we used:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>pmovie-&gt;title</code></pre></td></tr></tbody></table></div>
<br>
<br>
Which is for all purposes equivalent to: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>(*pmovie).title</code></pre></td></tr></tbody></table></div>
<br>
<br>
Both expressions <tt>pmovie-&gt;title</tt> and <tt>(*pmovie).title</tt> are valid and both mean that we are evaluating the member <tt>title</tt> of the data structure <strong>pointed by</strong> a pointer called <tt>pmovie</tt>. It must be clearly differentiated from: <br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>*pmovie.title</code></pre></td></tr></tbody></table></div>
<br>
<br>
which is equivalent to:<br>
<br>
<div class="auto"><table class="snippet"><tbody><tr><td class="rownum"><tt>&nbsp;</tt></td>
<td class="source"><pre><code>*(pmovie.title)</code></pre></td></tr></tbody></table></div>
<br>
<br>
And that would access the value pointed by a hypothetical pointer member called <tt>title</tt> of the structure object <tt>pmo</tt></td></tr></tbody></table></div></body></html>